{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable max-len */\nimport { isNullOrUndefined, getDefaultDateObject, getValue, cldrData } from '@syncfusion/ej2-base';\nimport { MS_PER_DAY, addDays, resetTime, capitalizeFirstWord } from '../schedule/base/util';\nimport { Islamic, Gregorian } from '../common/calendar-util';\nimport { Timezone } from '../schedule/timezone/timezone';\n/**\n * Date Generator from Recurrence Rule\n */\n/**\n * Generate Summary from Recurrence Rule\n *\n * @param {string} rule Accepts the Recurrence rule\n * @param {L10n} localeObject Accepts the locale object\n * @param {string} locale Accepts the locale name\n * @param {CalendarType} calendarType Accepts the calendar type\n * @returns {string} Returns the summary string from given recurrence rule\n */\nexport function generateSummary(rule, localeObject, locale, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = 'Gregorian';\n  }\n  var ruleObject = extractObjectFromRule(rule);\n  var summary = localeObject.getConstant(EVERY) + ' ';\n  var cldrObj;\n  var cldrObj1;\n  var calendarMode = calendarType.toLowerCase();\n  if (locale === 'en' || locale === 'en-US') {\n    var nameSpace1 = 'months.stand-alone.abbreviated';\n    var nameSpace = 'days.stand-alone.abbreviated';\n    cldrObj1 = getValue(nameSpace1, getDefaultDateObject(calendarMode));\n    cldrObj = getValue(nameSpace, getDefaultDateObject(calendarMode));\n  } else {\n    var nameSpace1 = 'main.' + locale + '.dates.calendars.' + calendarMode + '.months.stand-alone.abbreviated';\n    var nameSpace = 'main.' + locale + '.dates.calendars.' + calendarMode + '.days.stand-alone.abbreviated';\n    cldrObj1 = getValue(nameSpace1, cldrData);\n    cldrObj = getValue(nameSpace, cldrData);\n  }\n  if (ruleObject.interval > 1) {\n    summary += ruleObject.interval + ' ';\n  }\n  switch (ruleObject.freq) {\n    case 'DAILY':\n      summary += localeObject.getConstant(DAYS);\n      break;\n    case 'WEEKLY':\n      summary += localeObject.getConstant(WEEKS) + ' ' + localeObject.getConstant(ON) + ' ';\n      ruleObject.day.forEach(function (day, index) {\n        summary += capitalizeFirstWord(getValue(DAYINDEXOBJECT[\"\" + day], cldrObj), 'single');\n        summary += ruleObject.day.length - 1 === index ? '' : ', ';\n      });\n      break;\n    case 'MONTHLY':\n      summary += localeObject.getConstant(MONTHS) + ' ' + localeObject.getConstant(ON) + ' ';\n      summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n      break;\n    case 'YEARLY':\n      summary += localeObject.getConstant(YEARS) + ' ' + localeObject.getConstant(ON) + ' ';\n      summary += capitalizeFirstWord(getValue(ruleObject.month[0].toString(), cldrObj1), 'single') + ' ';\n      summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n      break;\n  }\n  if (ruleObject.count) {\n    summary += ', ' + ruleObject.count + ' ' + localeObject.getConstant(TIMES);\n  } else if (ruleObject.until) {\n    var tempDate = ruleObject.until;\n    summary += ', ' + localeObject.getConstant(UNTIL) + ' ' + tempDate.getDate() + ' ' + capitalizeFirstWord(getValue((tempDate.getMonth() + 1).toString(), cldrObj1), 'single') + ' ' + tempDate.getFullYear();\n  }\n  return summary;\n}\n/**\n * Generates Month summary\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {string[]} cldrObj Accepts the collections of month name from calendar\n * @param {L10n} localeObj Accepts the locale object\n * @returns {string} Returns the month summary string from given recurrence rule object\n * @private\n */\nfunction getMonthSummary(ruleObject, cldrObj, localeObj) {\n  var summary = '';\n  if (ruleObject.monthDay.length) {\n    summary += ruleObject.monthDay[0];\n  } else if (ruleObject.day) {\n    var pos = ruleObject.setPosition - 1;\n    summary += localeObj.getConstant(WEEKPOS[pos > -1 ? pos : WEEKPOS.length - 1]) + ' ' + capitalizeFirstWord(getValue(DAYINDEXOBJECT[ruleObject.day[0]], cldrObj), 'single');\n  }\n  return summary;\n}\n/**\n * Generates the date collections from the given recurrence rule\n *\n * @param {Date} startDate Accepts the rule start date\n * @param {string} rule Accepts the recurrence rule\n * @param {string} excludeDate Accepts the exception dates in string format\n * @param {number} startDayOfWeek Accepts the start day index of week\n * @param {number} maximumCount Accepts the maximum number count to generate date collections\n * @param {Date} viewDate Accepts the current date instead of start date\n * @param {CalendarType} calendarMode Accepts the calendar type\n * @param {string} oldTimezone Accepts the timezone name\n * @param {string} newTimezone Accepts the timezone name\n * @returns {number[]} Returns the collection of dates\n */\nexport function generate(startDate, rule, excludeDate, startDayOfWeek, maximumCount, viewDate, calendarMode, oldTimezone, newTimezone) {\n  if (maximumCount === void 0) {\n    maximumCount = MAXOCCURRENCE;\n  }\n  if (viewDate === void 0) {\n    viewDate = null;\n  }\n  if (calendarMode === void 0) {\n    calendarMode = 'Gregorian';\n  }\n  if (oldTimezone === void 0) {\n    oldTimezone = null;\n  }\n  if (newTimezone === void 0) {\n    newTimezone = null;\n  }\n  var ruleObject = extractObjectFromRule(rule);\n  var cacheDate;\n  calendarUtil = getCalendarUtil(calendarMode);\n  var data = [];\n  var modifiedDate = new Date(startDate.getTime());\n  tempExcludeDate = [];\n  var tempDate = isNullOrUndefined(excludeDate) ? [] : excludeDate.split(',');\n  var tz = new Timezone();\n  tempDate.forEach(function (content) {\n    var parsedDate = getDateFromRecurrenceDateString(content);\n    if (oldTimezone && newTimezone) {\n      parsedDate = tz.convert(new Date(parsedDate.getTime()), oldTimezone, newTimezone);\n    }\n    tempExcludeDate.push(new Date(parsedDate.getTime()).setHours(0, 0, 0, 0));\n  });\n  ruleObject.recExceptionCount = !isNullOrUndefined(ruleObject.count) ? tempExcludeDate.length : 0;\n  if (viewDate && viewDate > startDate && !ruleObject.count) {\n    tempViewDate = new Date(new Date(viewDate.getTime()).setHours(0, 0, 0));\n  } else {\n    tempViewDate = null;\n  }\n  if (!ruleObject.until && tempViewDate) {\n    cacheDate = new Date(tempViewDate.getTime());\n    cacheDate.setDate(tempViewDate.getDate() + maximumCount * ruleObject.interval);\n    ruleObject.until = cacheDate;\n  }\n  if (ruleObject.until && startDate > ruleObject.until) {\n    return data;\n  }\n  maxOccurrence = maximumCount;\n  setFirstDayOfWeek(DAYINDEX[parseInt(startDayOfWeek.toString(), 10)]);\n  if (ruleObject.until) {\n    var end = resetTime(ruleObject.until);\n    ruleObject.until = new Date(end.getFullYear(), end.getMonth(), end.getDate(), 23, 59, 59);\n  }\n  switch (ruleObject.freq) {\n    case 'DAILY':\n      dailyType(modifiedDate, ruleObject.until, data, ruleObject);\n      break;\n    case 'WEEKLY':\n      weeklyType(modifiedDate, ruleObject.until, data, ruleObject);\n      break;\n    case 'MONTHLY':\n      monthlyType(modifiedDate, ruleObject.until, data, ruleObject);\n      break;\n    case 'YEARLY':\n      yearlyType(modifiedDate, ruleObject.until, data, ruleObject);\n  }\n  return data;\n}\n/**\n * Generate date object from given date string\n *\n * @param {string} recDateString Accepts the exception date as string\n * @returns {Date} Returns the date from exception date string\n */\nexport function getDateFromRecurrenceDateString(recDateString) {\n  return new Date(recDateString.substr(0, 4) + '-' + recDateString.substr(4, 2) + '-' + recDateString.substr(6, 5) + ':' + recDateString.substr(11, 2) + ':' + recDateString.substr(13));\n}\n/**\n * Internal method to handle exclude date\n *\n * @param {number[]} data Accepts the exception date collections\n * @param {number} date Accepts the new exclude date\n * @returns {void}\n * @private\n */\nfunction excludeDateHandler(data, date) {\n  var zeroIndex = new Date(date).setHours(0, 0, 0, 0);\n  if (tempExcludeDate.indexOf(zeroIndex) === -1 && (!tempViewDate || zeroIndex >= tempViewDate.getTime())) {\n    data.push(date);\n  }\n}\n/**\n * Internal method for get date count\n *\n * @param {Date} startDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} Returns the number of date count\n * @private\n */\nfunction getDateCount(startDate, ruleObject) {\n  var count = maxOccurrence;\n  if (ruleObject.count) {\n    count = ruleObject.count;\n  } else if (ruleObject.until) {\n    if (ruleObject.freq === 'DAILY' || ruleObject.freq === 'WEEKLY') {\n      count = Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1;\n    } else if (ruleObject.freq === 'MONTHLY' || ruleObject.freq === 'YEARLY') {\n      count = Math.floor((ruleObject.until.getMonth() + 12 * ruleObject.until.getFullYear() - (startDate.getMonth() + 12 * startDate.getFullYear())) / ruleObject.interval) + (ruleObject.day.length > 1 ? Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1 : 1);\n      if (ruleObject.freq === 'YEARLY') {\n        count = ruleObject.month.length > 1 ? count * ruleObject.month.length : count;\n      }\n    }\n  }\n  return count;\n}\n/**\n *  Internal method for daily type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction dailyType(startDate, endDate, data, ruleObject) {\n  var tempDate = new Date(startDate.getTime());\n  var interval = ruleObject.interval;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var state;\n  var expectedDays = ruleObject.day;\n  while (compareDates(tempDate, endDate)) {\n    state = true;\n    state = validateRules(tempDate, ruleObject);\n    if (state && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1 || expectedDays.length === 0)) {\n      excludeDateHandler(data, tempDate.getTime());\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        break;\n      }\n    }\n    tempDate.setDate(tempDate.getDate() + interval);\n    if (tempDate.getHours() !== startDate.getHours()) {\n      tempDate.setHours(startDate.getHours());\n    }\n  }\n}\n/**\n * Internal method for weekly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction weeklyType(startDate, endDate, data, ruleObject) {\n  var tempDate = new Date(startDate.getTime());\n  if (!ruleObject.day.length) {\n    ruleObject.day.push(DAYINDEX[startDate.getDay()]);\n  }\n  var interval = ruleObject.interval;\n  var expectedDays = ruleObject.day;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var weekState = true;\n  var wkstIndex;\n  var weekCollection = [];\n  if (expectedDays.length > 1) {\n    if (isNullOrUndefined(ruleObject.wkst) || ruleObject.wkst === '') {\n      ruleObject.wkst = dayIndex[0];\n    }\n    wkstIndex = DAYINDEX.indexOf(ruleObject.wkst);\n    while (compareDates(tempDate, endDate)) {\n      var startDateDiff = DAYINDEX.indexOf(DAYINDEX[tempDate.getDay()]) - wkstIndex;\n      startDateDiff = startDateDiff === -1 ? 6 : startDateDiff;\n      var weekstartDate = addDays(tempDate, -startDateDiff);\n      var weekendDate = addDays(weekstartDate, 6);\n      var compareTempDate = new Date(tempDate.getTime());\n      weekendDate = resetTime(weekendDate);\n      compareTempDate = resetTime(compareTempDate);\n      while (weekendDate >= compareTempDate) {\n        if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n          weekCollection.push([tempDate.getTime()]);\n        }\n        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n          break;\n        }\n        tempDate.setDate(tempDate.getDate() + 1);\n        if (tempDate.getHours() !== startDate.getHours()) {\n          tempDate.setHours(startDate.getHours());\n        }\n        compareTempDate = new Date(tempDate.getTime());\n        compareTempDate = resetTime(compareTempDate);\n      }\n      tempDate.setDate(tempDate.getDate() - 1);\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        break;\n      }\n      tempDate.setDate(tempDate.getDate() + 1 + (interval - 1) * 7);\n      insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n      weekCollection = [];\n    }\n  } else {\n    tempDate = getStartDateForWeek(startDate, ruleObject.day);\n    while (compareDates(tempDate, endDate)) {\n      weekState = validateRules(tempDate, ruleObject);\n      if (weekState && expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n        excludeDateHandler(data, tempDate.getTime());\n      }\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        break;\n      }\n      tempDate.setDate(tempDate.getDate() + interval * 7);\n    }\n    insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n    weekCollection = [];\n  }\n}\n/**\n *  Internal method for monthly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyType(startDate, endDate, data, ruleObject) {\n  // Set monthday value if BYDAY, BYMONTH and Month day property is not set based on start date\n  if (!ruleObject.month.length && !ruleObject.day.length && !ruleObject.monthDay.length) {\n    ruleObject.monthDay.push(startDate.getDate());\n    if (ruleObject.freq === 'YEARLY') {\n      ruleObject.month.push(startDate.getMonth() + 1);\n    }\n  } else if (ruleObject.month.length > 0 && !ruleObject.day.length && !ruleObject.monthDay.length) {\n    ruleObject.monthDay.push(startDate.getDate());\n  }\n  var ruleType = validateMonthlyRuleType(ruleObject);\n  switch (ruleType) {\n    case 'day':\n      switch (ruleObject.freq) {\n        case 'MONTHLY':\n          monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n          break;\n        case 'YEARLY':\n          monthlyDayTypeProcess(startDate, endDate, data, ruleObject);\n          break;\n      }\n      break;\n    case 'both':\n    case 'date':\n      switch (ruleObject.freq) {\n        case 'MONTHLY':\n          monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n          break;\n        case 'YEARLY':\n          monthlyDateTypeProcess(startDate, endDate, data, ruleObject);\n          break;\n      }\n      break;\n  }\n}\n/**\n * Internal method for yearly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction yearlyType(startDate, endDate, data, ruleObject) {\n  var typeValue = checkYearlyType(ruleObject);\n  switch (typeValue) {\n    case 'MONTH':\n      monthlyType(startDate, endDate, data, ruleObject);\n      break;\n    case 'WEEKNO':\n      processWeekNo(startDate, endDate, data, ruleObject);\n      break;\n    case 'YEARDAY':\n      processYearDay(startDate, endDate, data, ruleObject);\n      break;\n  }\n}\n/**\n * Internal method for process week no\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processWeekNo(startDate, endDate, data, ruleObject) {\n  var stDate = calendarUtil.getYearLastDate(startDate, 0);\n  var tempDate;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var state;\n  var startDay;\n  var firstWeekSpan;\n  var weekNos = ruleObject.weekNo;\n  var weekNo;\n  var maxDate;\n  var minDate;\n  var weekCollection = [];\n  var expectedDays = ruleObject.day;\n  while (compareDates(stDate, endDate)) {\n    startDay = dayIndex.indexOf(DAYINDEX[stDate.getDay()]);\n    firstWeekSpan = 6 - startDay + 1;\n    for (var index = 0; index < weekNos.length; index++) {\n      weekNo = weekNos[parseInt(index.toString(), 10)];\n      weekNo = weekNo > 0 ? weekNo : 53 + weekNo + 1;\n      maxDate = weekNo === 1 ? firstWeekSpan : firstWeekSpan + (weekNo - 1) * 7;\n      minDate = weekNo === 1 ? firstWeekSpan - 7 : firstWeekSpan + (weekNo - 2) * 7;\n      while (minDate < maxDate) {\n        tempDate = new Date(stDate.getTime() + MS_PER_DAY * minDate);\n        if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n          if (isNullOrUndefined(ruleObject.setPosition)) {\n            insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n          } else {\n            weekCollection.push([tempDate.getTime()]);\n          }\n        }\n        minDate++;\n      }\n    }\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDatasIntoExistingCollection(weekCollection, state, startDate, endDate, data, ruleObject);\n    }\n    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n      return;\n    }\n    stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n    weekCollection = [];\n  }\n}\n/**\n * Internal method for process year day\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processYearDay(startDate, endDate, data, ruleObject) {\n  var stDate = calendarUtil.getYearLastDate(startDate, 0);\n  var tempDate;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var state;\n  var dateCollection = [];\n  var date;\n  var expectedDays = ruleObject.day;\n  while (compareDates(stDate, endDate)) {\n    for (var index = 0; index < ruleObject.yearDay.length; index++) {\n      date = ruleObject.yearDay[parseInt(index.toString(), 10)];\n      tempDate = new Date(stDate.getTime());\n      if ((date === calendarUtil.getLeapYearDaysCount() || date === -calendarUtil.getLeapYearDaysCount()) && !calendarUtil.isLeapYear(calendarUtil.getFullYear(tempDate), 1)) {\n        tempDate.setDate(tempDate.getDate() + 1);\n        continue;\n      }\n      tempDate.setDate(tempDate.getDate() + (date < 0 ? calendarUtil.getYearDaysCount(tempDate, 1) + 1 + date : date));\n      if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n        if (ruleObject.setPosition == null) {\n          insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n        } else {\n          dateCollection.push([tempDate.getTime()]);\n        }\n      }\n    }\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject);\n    }\n    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n      return;\n    }\n    stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n    dateCollection = [];\n  }\n}\n/**\n * Internal method to check yearly type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {YearRuleType} Returns the Yearly rule type object\n * @private\n */\nfunction checkYearlyType(ruleObject) {\n  if (ruleObject.yearDay.length) {\n    return 'YEARDAY';\n  } else if (ruleObject.weekNo.length) {\n    return 'WEEKNO';\n  }\n  return 'MONTH';\n}\n/**\n * Internal method to initialize recurrence rule variables\n *\n * @param {Date} startDate Accepts the start date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {RuleData} Return the rule data object\n * @private\n */\nfunction initializeRecRuleVariables(startDate, ruleObject) {\n  var ruleData = {\n    monthCollection: [],\n    index: 0,\n    tempDate: new Date(startDate.getTime()),\n    mainDate: new Date(startDate.getTime()),\n    expectedCount: getDateCount(startDate, ruleObject),\n    monthInit: 0,\n    dateCollection: []\n  };\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(ruleData.tempDate, ruleObject.month[0], ruleData.tempDate.getDate());\n  }\n  return ruleData;\n}\n/**\n * Internal method for process monthly date type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDateTypeProcess(startDate, endDate, data, ruleObject) {\n  if (ruleObject.month.length) {\n    monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n    return;\n  }\n  var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n  var currentMonthDate;\n  ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n  while (compareDates(ruleData.tempDate, endDate)) {\n    currentMonthDate = new Date(ruleData.tempDate.getTime());\n    while (calendarUtil.isSameYear(currentMonthDate, ruleData.tempDate) && ruleData.expectedCount && data.length + ruleObject.recExceptionCount <= ruleData.expectedCount) {\n      if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && !calendarUtil.checkMonth(ruleData.tempDate, ruleObject.month)) {\n        processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, false);\n        ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n      } else {\n        calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n        ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n        break;\n      }\n    }\n    ruleData.tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());\n    insertDataCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n    if (calendarUtil.isLastMonth(ruleData.tempDate)) {\n      calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n      ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n    }\n    if (ruleData.expectedCount && data.length + ruleObject.recExceptionCount >= ruleData.expectedCount) {\n      return;\n    }\n    ruleData.tempDate.setFullYear(ruleData.tempDate.getFullYear() + ruleObject.interval - 1);\n    ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n    ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n    ruleData.dateCollection = [];\n  }\n}\n/**\n * Internal method for process monthly date type with month frequency from recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n  var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n  ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n  if ((ruleObject.freq === 'MONTHLY' && ruleObject.interval === 12 || ruleObject.freq === 'YEARLY') && calendarUtil.getMonthDaysCount(startDate) < ruleObject.monthDay[0]) {\n    return;\n  }\n  while (compareDates(ruleData.tempDate, endDate)) {\n    ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n    processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, true, startDate, data);\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDatasIntoExistingCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n    }\n    if (ruleData.expectedCount && data.length + ruleObject.recExceptionCount >= ruleData.expectedCount) {\n      return;\n    }\n    ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n    ruleData.dateCollection = [];\n  }\n}\n/**\n * To process date collection for Monthly & Yearly based on BYMONTH Day property\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {RuleData} recRuleVariables Accepts the rule data\n * @param {Date} endDate Accepts the end date\n * @param {boolean} isByMonth Accepts the boolean to validate either month or not\n * @param {Date} startDate Accepts the start date\n * @param {number[]} data Accepts the collection of dates\n * @returns {void}\n * @private\n */\nfunction processDateCollectionForByMonthDay(ruleObject, recRuleVariables, endDate, isByMonth, startDate, data) {\n  for (var index = 0; index < ruleObject.monthDay.length; index++) {\n    recRuleVariables.date = ruleObject.monthDay[parseInt(index.toString(), 10)];\n    recRuleVariables.tempDate = calendarUtil.getMonthStartDate(recRuleVariables.tempDate);\n    var maxDate = calendarUtil.getMonthDaysCount(recRuleVariables.tempDate);\n    recRuleVariables.date = recRuleVariables.date > 0 ? recRuleVariables.date : maxDate + recRuleVariables.date + 1;\n    if (validateProperDate(recRuleVariables.tempDate, recRuleVariables.date, recRuleVariables.mainDate) && recRuleVariables.date > 0) {\n      calendarUtil.setDate(recRuleVariables.tempDate, recRuleVariables.date);\n      if (endDate && recRuleVariables.tempDate > endDate) {\n        return;\n      }\n      if (ruleObject.day.length === 0 || ruleObject.day.indexOf(DAYINDEX[recRuleVariables.tempDate.getDay()]) > -1) {\n        if (isByMonth && isNullOrUndefined(ruleObject.setPosition) && recRuleVariables.expectedCount && data.length + ruleObject.recExceptionCount < recRuleVariables.expectedCount) {\n          insertDateCollection(recRuleVariables.state, startDate, endDate, data, ruleObject, recRuleVariables.tempDate.getTime());\n        } else {\n          recRuleVariables.dateCollection.push([recRuleVariables.tempDate.getTime()]);\n        }\n      }\n    }\n  }\n}\n/**\n * Internal method to set next valid date\n *\n * @param {Date} tempDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} monthInit Accepts the initial month\n * @param {Date} beginDate Accepts the initial date\n * @param {number} interval Accepts the interval duration\n * @returns {number} Returnx the next valid date\n * @private\n */\nfunction setNextValidDate(tempDate, ruleObject, monthInit, beginDate, interval) {\n  if (beginDate === void 0) {\n    beginDate = null;\n  }\n  var monthData = beginDate ? beginDate.getMonth() : 0;\n  var startDate = calendarUtil.getMonthStartDate(tempDate);\n  interval = isNullOrUndefined(interval) ? ruleObject.interval : interval;\n  tempDate.setFullYear(startDate.getFullYear());\n  tempDate.setMonth(startDate.getMonth());\n  tempDate.setDate(startDate.getDate());\n  if (ruleObject.month.length) {\n    monthInit++;\n    monthInit = monthInit % ruleObject.month.length;\n    calendarUtil.setMonth(tempDate, ruleObject.month[parseInt(monthInit.toString(), 10)], 1);\n    if (monthInit === 0) {\n      calendarUtil.addYears(tempDate, interval, ruleObject.month[0]);\n    }\n  } else {\n    if (beginDate && beginDate.getFullYear() < tempDate.getFullYear()) {\n      monthData = tempDate.getMonth() - 1;\n    }\n    calendarUtil.setValidDate(tempDate, interval, 1, monthData, beginDate);\n  }\n  return monthInit;\n}\n/**\n * To get month collection when BYDAY property having more than one value in list.\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction getMonthCollection(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var tempDate = new Date(startDate.getTime());\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n  var monthCollection = [];\n  var dateCollection = [];\n  var dates = [];\n  var index;\n  var state;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var monthInit = 0;\n  var beginDate;\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n  }\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n  while (compareDates(tempDate, endDate) && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {\n    var currentMonthDate = new Date(tempDate.getTime());\n    var isHavingNumber = expectedDays.map(function (item) {\n      return HASNUMBER.test(item);\n    });\n    if (isHavingNumber.indexOf(true) > -1) {\n      for (var j = 0; j <= expectedDays.length - 1; j++) {\n        var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);\n        var position = parseInt(expectedDaysArray[0], 10);\n        tempDate = new Date(tempDate.getTime());\n        tempDate = calendarUtil.getMonthStartDate(tempDate);\n        tempDate = getStartDateForWeek(tempDate, expectedDays);\n        currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n        while (calendarUtil.isSameYear(currentMonthDate, tempDate) && calendarUtil.isSameMonth(currentMonthDate, tempDate)) {\n          if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentMonthDate.getDay()]) {\n            monthCollection.push([currentMonthDate.getTime()]);\n          }\n          currentMonthDate.setDate(currentMonthDate.getDate() + 1);\n        }\n        currentMonthDate.setDate(currentMonthDate.getDate() - 1);\n        if (expectedDaysArray[0].indexOf('-') > -1) {\n          index = monthCollection.length - -1 * position;\n        } else {\n          index = position - 1;\n        }\n        index = isNaN(index) ? 0 : index;\n        if (monthCollection.length > 0) {\n          if (isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n          } else {\n            dateCollection = [filterDateCollectionByIndex(monthCollection, index, dates)];\n          }\n        }\n        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n          return;\n        }\n        monthCollection = [];\n      }\n      if (!isNullOrUndefined(ruleObject.setPosition)) {\n        insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n        dates = [];\n      }\n      monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n      tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n      monthCollection = [];\n    } else {\n      var weekCollection = [];\n      var dayCycleData = processWeekDays(expectedDays);\n      currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n      var initialDate = new Date(tempDate.getTime());\n      beginDate = new Date(tempDate.getTime());\n      while (calendarUtil.isSameMonth(initialDate, tempDate)) {\n        weekCollection.push(tempDate.getTime());\n        if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n          monthCollection.push(weekCollection);\n          weekCollection = [];\n        }\n        tempDate.setDate(tempDate.getDate() + dayCycleData[DAYINDEX[tempDate.getDay()]]);\n      }\n      index = ruleObject.setPosition < 1 ? monthCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;\n      if (isNullOrUndefined(ruleObject.setPosition)) {\n        index = 0;\n        var datas = [];\n        for (var week = 0; week < monthCollection.length; week++) {\n          for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {\n            datas.push(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]);\n          }\n        }\n        monthCollection = [datas];\n      }\n      if (monthCollection.length > 0) {\n        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n      }\n      if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n        return;\n      }\n      monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n      tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n      monthCollection = [];\n    }\n  }\n}\n/**\n * To process monday day type for FREQ=MONTHLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  // When BYDAY property having more than 1 value.\n  if (expectedDays.length > 1) {\n    getMonthCollection(startDate, endDate, data, ruleObject);\n    return;\n  }\n  var tempDate = new Date(startDate.getTime());\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var monthCollection = [];\n  var beginDate;\n  var monthInit = 0;\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n  }\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n  while (compareDates(tempDate, endDate) && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {\n    beginDate = new Date(tempDate.getTime());\n    var currentMonthDate = new Date(tempDate.getTime());\n    while (calendarUtil.isSameMonth(tempDate, currentMonthDate)) {\n      monthCollection.push([currentMonthDate.getTime()]);\n      currentMonthDate.setDate(currentMonthDate.getDate() + 7);\n    }\n    // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n    insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n    monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    monthCollection = [];\n  }\n}\n/**\n * To process monday day type for FREQ=YEARLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDayTypeProcess(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var isHavingNumber = expectedDays.map(function (item) {\n    return HASNUMBER.test(item);\n  });\n  // If BYDAY property having more than 1 value in list\n  if (expectedDays.length > 1 && isHavingNumber.indexOf(true) > -1) {\n    processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject);\n    return;\n  } else if (ruleObject.month.length && expectedDays.length === 1 && isHavingNumber.indexOf(true) > -1) {\n    monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n    return;\n  }\n  var tempDate = new Date(startDate.getTime());\n  var currentMonthDate;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var interval = ruleObject.interval;\n  var monthCollection = [];\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n  }\n  // Set the date as start date of the yeear if yearly freq having ByDay property alone\n  if (isNullOrUndefined(ruleObject.setPosition) && ruleObject.month.length === 0 && ruleObject.weekNo.length === 0) {\n    tempDate.setFullYear(startDate.getFullYear(), 0, 1);\n  }\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n  while (compareDates(tempDate, endDate)) {\n    currentMonthDate = new Date(tempDate.getTime());\n    while (calendarUtil.isSameYear(currentMonthDate, tempDate) && expectedCount && data.length + ruleObject.recExceptionCount <= expectedCount) {\n      currentMonthDate = new Date(tempDate.getTime());\n      while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n        if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && !calendarUtil.checkMonth(tempDate, ruleObject.month)) {\n          if (expectedDays.length > 1) {\n            if (calendarUtil.compareMonth(currentMonthDate, tempDate)) {\n              calendarUtil.setValidDate(tempDate, 1, 1);\n              tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n              break;\n            }\n            if (expectedDays.indexOf(DAYINDEX[currentMonthDate.getDay()]) > -1) {\n              monthCollection.push([currentMonthDate.getTime()]);\n            }\n            currentMonthDate.setDate(currentMonthDate.getDate() + 1);\n          } else {\n            // If BYDAY property having 1 value in list\n            if (currentMonthDate.getFullYear() > tempDate.getFullYear()) {\n              calendarUtil.setValidDate(tempDate, 1, 1);\n              tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n              break;\n            }\n            var newstr = getDayString(expectedDays[0]);\n            if (DAYINDEX[currentMonthDate.getDay()] === newstr && new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), 0) > new Date(startDate.getFullYear())) {\n              monthCollection.push([currentMonthDate.getTime()]);\n            }\n            currentMonthDate.setDate(currentMonthDate.getDate() + 7);\n          }\n        } else {\n          calendarUtil.setValidDate(tempDate, 1, 1);\n          tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n          break;\n        }\n      }\n    }\n    tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());\n    // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n    insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n    if (calendarUtil.isLastMonth(tempDate)) {\n      calendarUtil.setValidDate(tempDate, 1, 1);\n      tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    }\n    tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n    if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n      return;\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    monthCollection = [];\n  }\n}\n/**\n * To process the recurrence rule when BYDAY property having values with integer\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var tempDate = new Date(startDate.getTime());\n  var interval = ruleObject.interval;\n  var monthCollection = [];\n  var dateCollection = [];\n  var index;\n  var state;\n  var monthInit = 0;\n  var currentMonthDate;\n  var currentDate;\n  var beginDate;\n  tempDate = calendarUtil.getMonthStartDate(tempDate);\n  var datas = [];\n  if (ruleObject.month.length) {\n    calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n  }\n  tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n  while (compareDates(tempDate, endDate)) {\n    currentMonthDate = new Date(tempDate.getTime());\n    for (var i = 0; i <= ruleObject.month.length; i++) {\n      for (var j = 0; j <= expectedDays.length - 1; j++) {\n        tempDate = calendarUtil.getMonthStartDate(tempDate);\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        monthCollection = [];\n        while (calendarUtil.isSameYear(currentMonthDate, tempDate) && expectedCount && data.length + ruleObject.recExceptionCount <= expectedCount) {\n          while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n            currentMonthDate = new Date(tempDate.getTime());\n            if (ruleObject.month.length === 0 || ruleObject.month.length > 0 && ruleObject.month[parseInt(i.toString(), 10)] === calendarUtil.getMonth(currentMonthDate)) {\n              var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);\n              var position = parseInt(expectedDaysArray[0], 10);\n              currentDate = new Date(tempDate.getTime());\n              while (calendarUtil.isSameYear(currentDate, tempDate) && calendarUtil.isSameMonth(currentDate, tempDate)) {\n                if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentDate.getDay()]) {\n                  monthCollection.push([currentDate.getTime()]);\n                }\n                currentDate.setDate(currentDate.getDate() + 1);\n              }\n              currentDate.setDate(currentDate.getDate() - 1);\n              if (expectedDaysArray[0].indexOf('-') > -1) {\n                index = monthCollection.length - -1 * position;\n              } else {\n                index = position - 1;\n              }\n              index = isNaN(index) ? 0 : index;\n            }\n            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate, 1);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n          }\n        }\n        tempDate = j === 0 && currentDate ? new Date(currentDate.getTime()) : new Date(currentMonthDate.getTime());\n        if (monthCollection.length > 0) {\n          if (isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n          } else {\n            dateCollection = [filterDateCollectionByIndex(monthCollection, index, datas)];\n          }\n        }\n        if (expectedCount && data.length + ruleObject.recExceptionCount >= expectedCount) {\n          return;\n        }\n      }\n    }\n    if (!isNullOrUndefined(ruleObject.setPosition)) {\n      insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n      datas = [];\n    }\n    if (calendarUtil.isLastMonth(tempDate)) {\n      calendarUtil.setValidDate(tempDate, 1, 1);\n      tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n    } else {\n      tempDate.setFullYear(tempDate.getFullYear() + interval);\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    if (ruleObject.month.length) {\n      calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n    }\n  }\n}\n/**\n * To get recurrence collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month collection dates\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {RuleData} Returns the rule data object\n * @private\n */\nfunction getRecurrenceCollection(monthCollection, expectedDays) {\n  var index;\n  var recurrenceCollectionObject = {\n    monthCollection: [],\n    index: 0\n  };\n  if (expectedDays.length === 1) {\n    // To split numeric value from BYDAY property value\n    var expectedDaysArrays = expectedDays[0].match(SPLITNUMBERANDSTRING);\n    var arrPosition = void 0;\n    if (expectedDaysArrays.length > 1) {\n      arrPosition = parseInt(expectedDaysArrays[0], 10);\n      index = arrPosition < 1 ? monthCollection.length + arrPosition : arrPosition - 1;\n    } else {\n      index = 0;\n      monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n    }\n  } else {\n    index = 0;\n    monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n  }\n  recurrenceCollectionObject.monthCollection = monthCollection;\n  recurrenceCollectionObject.index = index;\n  return recurrenceCollectionObject;\n}\n/**\n * Internal method to process the data collections\n *\n * @param {number[]} dateCollection Accepts the date collections\n * @param {boolean} state Accepts the state\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of numbers\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDataCollection(dateCollection, state, startDate, endDate, data, ruleObject) {\n  var index = ruleObject.setPosition < 1 ? dateCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;\n  if (isNullOrUndefined(ruleObject.setPosition)) {\n    index = 0;\n    dateCollection = getDateCollectionforBySetPosNull(dateCollection);\n  }\n  if (dateCollection.length > 0) {\n    insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject, index);\n  }\n}\n/**\n * To process month collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @returns {number[]} Returns the month date collections\n * @private\n */\nfunction getDateCollectionforBySetPosNull(monthCollection) {\n  var datas = [];\n  for (var week = 0; week < monthCollection.length; week++) {\n    for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {\n      datas.push(new Date(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]).getTime());\n    }\n  }\n  monthCollection = datas.length > 0 ? [datas] : [];\n  return monthCollection;\n}\n/**\n * To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the date collections\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject) {\n  var expectedDays = ruleObject.day;\n  var state;\n  var datas = [];\n  var dateCollection = [];\n  var recurrenceCollections = getRecurrenceCollection(monthCollection, expectedDays);\n  monthCollection = recurrenceCollections.monthCollection;\n  var index = recurrenceCollections.index;\n  if (ruleObject.setPosition != null) {\n    dateCollection = [filterDateCollectionByIndex(monthCollection, index, datas)];\n    insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n  } else {\n    if (monthCollection.length > 0) {\n      insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n    }\n  }\n  datas = [];\n}\n/**\n * To filter date collection when BYDAY property having values with number\n *\n * @param {number[]} monthCollection Accepts the date collections\n * @param {number} index Accepts the index of date collections\n * @param {number[]} datas Accepts the collection of dates\n * @returns {number[]} Returns the collection of dates\n * @private\n */\nfunction filterDateCollectionByIndex(monthCollection, index, datas) {\n  for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {\n    datas.push(monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)]);\n  }\n  return datas;\n}\n/**\n * To insert processed date collection in final array element\n *\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} dayData Accepts the date index\n * @returns {void}\n * @private\n */\nfunction insertDateCollection(state, startDate, endDate, data, ruleObject, dayData) {\n  var expectedCount = getDateCount(startDate, ruleObject);\n  var chDate = new Date(dayData);\n  state = validateRules(chDate, ruleObject);\n  if (chDate >= startDate && compareDates(chDate, endDate) && state && expectedCount && data.length + ruleObject.recExceptionCount < expectedCount) {\n    excludeDateHandler(data, dayData);\n  }\n}\n/**\n * Return the last week number of given month and year.\n *\n * @param {number} year Accepts the Year in number format\n * @param {number} startDayOfWeek Accepts the start date\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {number} week Accepts the week in number format\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} returns week number\n * @private\n */\nfunction weekCount(year, startDayOfWeek, monthCollection, week, ruleObject) {\n  var firstDayOfWeek = startDayOfWeek || 0;\n  var firstOfMonth = new Date(year, ruleObject.month[0] - 1, 1);\n  var lastOfMonth = new Date(year, ruleObject.month[0], 0);\n  var numberOfDaysInMonth = lastOfMonth.getDate();\n  var firstWeekDay = (firstOfMonth.getDay() - firstDayOfWeek + 7) % 7;\n  var used = firstWeekDay + numberOfDaysInMonth;\n  var count = Math.ceil(used / 7) - 1;\n  var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(count.toString(), 10)];\n  var chDate = new Date(dayData);\n  var state = validateRules(chDate, ruleObject);\n  return state ? count : count - 1;\n}\n/**\n * To process date collection based on Byset position after process the collection based on BYDAY property value index: EX:BYDAY=1SUm-1SU\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDateCollectionBasedonBySetPos(monthCollection, state, startDate, endDate, data, ruleObject) {\n  if (monthCollection.length > 0) {\n    for (var week = 0; week < monthCollection.length; week++) {\n      monthCollection[parseInt(week.toString(), 10)].sort();\n      var expectedDays = ruleObject.day;\n      var isHavingNumber = expectedDays.map(function (item) {\n        return HASNUMBER.test(item);\n      });\n      var weekIndex = ruleObject.freq === 'YEARLY' && ruleObject.validRules.indexOf('BYMONTH') > -1 && !(isHavingNumber.indexOf(true) > -1) ? weekCount(new Date(monthCollection[0][0]).getFullYear(), 0, monthCollection, week, ruleObject) : monthCollection[parseInt(week.toString(), 10)].length + ruleObject.setPosition;\n      var index = ruleObject.setPosition < 1 ? weekIndex : ruleObject.setPosition - 1;\n      var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(index.toString(), 10)];\n      insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n    }\n  }\n}\n/**\n * To insert datas into existing collection which is processed from previous loop.\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} index Accepts the index value\n * @returns {void}\n * @private\n */\nfunction insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index) {\n  if (monthCollection.length > 0) {\n    index = !isNullOrUndefined(index) ? index : ruleObject.setPosition < 1 ? monthCollection.length + ruleObject.setPosition : ruleObject.setPosition - 1;\n    monthCollection[parseInt(index.toString(), 10)].sort();\n    for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {\n      var dayData = monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)];\n      insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n    }\n  }\n}\n/**\n * Internal method to compare dates\n *\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @returns {boolean} Returns the result of checking start and end dates\n * @private\n */\nfunction compareDates(startDate, endDate) {\n  return endDate ? startDate <= endDate : true;\n}\n/**\n * Internal method to get day string\n *\n * @param {string} expectedDays Accepts the exception date string\n * @returns {string} Returns the valid string\n * @private\n */\nfunction getDayString(expectedDays) {\n  // To get BYDAY value without numeric value\n  var newstr = expectedDays.replace(REMOVENUMBERINSTRING, '');\n  return newstr;\n}\n/**\n * Internal method to check day index\n *\n * @param {number} day Accepts the day index\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {boolean} Returns the index date\n * @private\n */\nfunction checkDayIndex(day, expectedDays) {\n  var sortedExpectedDays = [];\n  expectedDays.forEach(function (element) {\n    var expectedDaysNumberSplit = element.match(SPLITNUMBERANDSTRING);\n    if (expectedDaysNumberSplit.length === 2) {\n      sortedExpectedDays.push(expectedDaysNumberSplit[1]);\n    } else {\n      sortedExpectedDays.push(expectedDaysNumberSplit[0]);\n    }\n  });\n  return sortedExpectedDays.indexOf(DAYINDEX[parseInt(day.toString(), 10)]) === -1;\n}\n/**\n * Internal method to get start date of week\n *\n * @param {Date} startDate Accepts the start date\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {Date} Return the week start date\n * @private\n */\nfunction getStartDateForWeek(startDate, expectedDays) {\n  var tempDate = new Date(startDate.getTime());\n  var newstr;\n  if (expectedDays.length > 0) {\n    var expectedDaysArr = [];\n    for (var i = 0; i <= expectedDays.length - 1; i++) {\n      newstr = getDayString(expectedDays[parseInt(i.toString(), 10)]);\n      expectedDaysArr.push(newstr);\n    }\n    if (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1) {\n      do {\n        tempDate.setDate(tempDate.getDate() + 1);\n      } while (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1);\n    }\n  }\n  return tempDate;\n}\n/**\n * Method to generate recurrence rule object from given rule\n *\n * @param {string} rules Accepts the recurrence rule\n * @returns {RecRule} Returns the recurrence rule object\n */\nexport function extractObjectFromRule(rules) {\n  var ruleObject = {\n    freq: null,\n    interval: 1,\n    count: null,\n    until: null,\n    day: [],\n    wkst: null,\n    month: [],\n    weekNo: [],\n    monthDay: [],\n    yearDay: [],\n    setPosition: null,\n    validRules: []\n  };\n  var rulesList = rules.split(';');\n  var splitData = [];\n  var temp;\n  rulesList.forEach(function (data) {\n    splitData = data.split('=');\n    switch (splitData[0]) {\n      case 'UNTIL':\n        temp = splitData[1];\n        ruleObject.until = getDateFromRecurrenceDateString(temp);\n        break;\n      case 'BYDAY':\n        ruleObject.day = splitData[1].split(',');\n        ruleObject.validRules.push(splitData[0]);\n        break;\n      case 'BYMONTHDAY':\n        ruleObject.monthDay = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n      case 'BYMONTH':\n        ruleObject.month = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n      case 'BYYEARDAY':\n        ruleObject.yearDay = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n      case 'BYWEEKNO':\n        ruleObject.weekNo = splitData[1].split(',').map(Number);\n        ruleObject.validRules.push(splitData[0]);\n        break;\n      case 'INTERVAL':\n        ruleObject.interval = parseInt(splitData[1], 10);\n        break;\n      case 'COUNT':\n        ruleObject.count = parseInt(splitData[1], 10);\n        break;\n      case 'BYSETPOS':\n        ruleObject.setPosition = parseInt(splitData[1], 10) > 4 ? -1 : parseInt(splitData[1], 10);\n        break;\n      case 'FREQ':\n        ruleObject.freq = splitData[1];\n        break;\n      case 'WKST':\n        ruleObject.wkst = splitData[1];\n        break;\n    }\n  });\n  if (ruleObject.freq === 'MONTHLY' && ruleObject.monthDay.length === 0) {\n    var index = ruleObject.validRules.indexOf('BYDAY');\n    ruleObject.validRules.splice(index, 1);\n  }\n  return ruleObject;\n}\n/**\n * Internal method to validate proper date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number} data Accepts the data value\n * @param {Date} startDate Accepts the start date\n * @returns {boolean} Returns the result of date validate\n * @private\n */\nfunction validateProperDate(tempDate, data, startDate) {\n  var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n  return data <= maxDate && tempDate >= startDate;\n}\n/**\n * Internal method to process week days\n *\n * @param {string[]} expectedDays Accepts the expection dates\n * @returns {Object} Returns the weekdays object\n * @private\n */\nfunction processWeekDays(expectedDays) {\n  var dayCycle = {};\n  expectedDays.forEach(function (element, index) {\n    if (index === expectedDays.length - 1) {\n      var startIndex = dayIndex.indexOf(element);\n      var temp = startIndex;\n      while (temp % 7 !== dayIndex.indexOf(expectedDays[0])) {\n        temp++;\n      }\n      dayCycle[\"\" + element] = temp - startIndex;\n    } else {\n      dayCycle[\"\" + element] = dayIndex.indexOf(expectedDays[index + 1]) - dayIndex.indexOf(element);\n    }\n  });\n  return dayCycle;\n}\n/**\n * Internal method to check date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedDate Accepts the exception dates\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction checkDate(tempDate, expectedDate) {\n  var temp = expectedDate.slice(0);\n  var data;\n  var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n  data = temp.shift();\n  while (data) {\n    if (data < 0) {\n      data = data + maxDate + 1;\n    }\n    if (data === tempDate.getDate()) {\n      return false;\n    }\n    data = temp.shift();\n  }\n  return true;\n}\n/**\n * Internal method to check the year value\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedyearDay Accepts the exception dates in year\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction checkYear(tempDate, expectedyearDay) {\n  var temp = expectedyearDay.slice(0);\n  var data;\n  var yearDay = getYearDay(tempDate);\n  data = temp.shift();\n  while (data) {\n    if (data < 0) {\n      data = data + calendarUtil.getYearDaysCount(tempDate, 0) + 1;\n    }\n    if (data === yearDay) {\n      return false;\n    }\n    data = temp.shift();\n  }\n  return true;\n}\n/**\n * Internal method to get the year day\n *\n * @param {Date} currentDate Accepts the date value\n * @returns {number} Returns the boolean value\n * @private\n */\nfunction getYearDay(currentDate) {\n  if (!startDateCollection[calendarUtil.getFullYear(currentDate)]) {\n    startDateCollection[calendarUtil.getFullYear(currentDate)] = calendarUtil.getYearLastDate(currentDate, 0);\n  }\n  var tempDate = startDateCollection[calendarUtil.getFullYear(currentDate)];\n  var diff = currentDate.getTime() - tempDate.getTime();\n  return Math.ceil(diff / MS_PER_DAY);\n}\n/**\n * Internal method to validate monthly rule type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {MonthlyType} Returns the monthly type object\n * @private\n */\nfunction validateMonthlyRuleType(ruleObject) {\n  if (ruleObject.monthDay.length && !ruleObject.day.length) {\n    return 'date';\n  } else if (!ruleObject.monthDay.length && ruleObject.day.length) {\n    return 'day';\n  }\n  return 'both';\n}\n/**\n * Internal method to re-order the week days based on first day of week\n *\n * @param {string[]} days Accepts the week days value\n * @returns {void}\n * @private\n */\nfunction rotate(days) {\n  var data = days.shift();\n  days.push(data);\n}\n/**\n * Internal method to set first day of week\n *\n * @param {string} day Accepts the first day string\n * @returns {void}\n * @private\n */\nfunction setFirstDayOfWeek(day) {\n  while (dayIndex[0] !== day) {\n    rotate(dayIndex);\n  }\n}\n/**\n * Internal method to validate recurrence rule\n *\n * @param {Date} tempDate Accepts the date value\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction validateRules(tempDate, ruleObject) {\n  var state = true;\n  var expectedDays = ruleObject.day;\n  var expectedMonth = ruleObject.month;\n  var expectedDate = calendarUtil.getExpectedDays(tempDate, ruleObject.monthDay);\n  var expectedyearDay = ruleObject.yearDay;\n  ruleObject.validRules.forEach(function (rule) {\n    switch (rule) {\n      case 'BYDAY':\n        if (checkDayIndex(tempDate.getDay(), expectedDays)) {\n          state = false;\n        }\n        break;\n      case 'BYMONTH':\n        if (calendarUtil.checkMonth(tempDate, expectedMonth)) {\n          state = false;\n        }\n        break;\n      case 'BYMONTHDAY':\n        if (checkDate(tempDate, expectedDate)) {\n          state = false;\n        }\n        break;\n      case 'BYYEARDAY':\n        if (checkYear(tempDate, expectedyearDay)) {\n          state = false;\n        }\n        break;\n    }\n  });\n  return state;\n}\n/**\n * Internal method to get calendar util\n *\n * @param {CalendarType} calendarMode Accepts the calendar type object\n * @returns {CalendarUtil} Returns the calendar util object\n * @private\n */\nexport function getCalendarUtil(calendarMode) {\n  if (calendarMode === 'Islamic') {\n    return new Islamic();\n  }\n  return new Gregorian();\n}\nvar startDateCollection = {};\nvar tempExcludeDate;\nvar dayIndex = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar maxOccurrence;\nvar tempViewDate;\nvar calendarUtil;\nvar DAYINDEX = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar MAXOCCURRENCE = 43;\nvar WEEKPOS = ['first', 'second', 'third', 'fourth', 'last'];\nvar TIMES = 'summaryTimes';\nvar ON = 'summaryOn';\nvar EVERY = 'every';\nvar UNTIL = 'summaryUntil';\nvar DAYS = 'summaryDay';\nvar WEEKS = 'summaryWeek';\nvar MONTHS = 'summaryMonth';\nvar YEARS = 'summaryYear';\nvar DAYINDEXOBJECT = {\n  SU: 'sun',\n  MO: 'mon',\n  TU: 'tue',\n  WE: 'wed',\n  TH: 'thu',\n  FR: 'fri',\n  SA: 'sat'\n};\n// To check string has number\nvar HASNUMBER = /\\d/;\n// To find the numbers in string\nvar REMOVENUMBERINSTRING = /[^A-Z]+/;\n// To split number and string\nvar SPLITNUMBERANDSTRING = /[a-z]+|[^a-z]+/gi;\n/**\n * Method to generate string from date\n *\n * @param {Date} date Accepts the date value\n * @returns {string} Returns the string value\n */\nexport function getRecurrenceStringFromDate(date) {\n  return [date.getUTCFullYear(), roundDateValues(date.getUTCMonth() + 1), roundDateValues(date.getUTCDate()), 'T', roundDateValues(date.getUTCHours()), roundDateValues(date.getUTCMinutes()), roundDateValues(date.getUTCSeconds()), 'Z'].join('');\n}\n/**\n * Internal method to round the date values\n *\n * @param {string | number} date Accepts the date value in either string or number format\n * @returns {string} Returns the date value in string format\n * @private\n */\nfunction roundDateValues(date) {\n  return ('0' + date).slice(-2);\n}","map":{"version":3,"names":["isNullOrUndefined","getDefaultDateObject","getValue","cldrData","MS_PER_DAY","addDays","resetTime","capitalizeFirstWord","Islamic","Gregorian","Timezone","generateSummary","rule","localeObject","locale","calendarType","ruleObject","extractObjectFromRule","summary","getConstant","EVERY","cldrObj","cldrObj1","calendarMode","toLowerCase","nameSpace1","nameSpace","interval","freq","DAYS","WEEKS","ON","day","forEach","index","DAYINDEXOBJECT","length","MONTHS","getMonthSummary","YEARS","month","toString","count","TIMES","until","tempDate","UNTIL","getDate","getMonth","getFullYear","localeObj","monthDay","pos","setPosition","WEEKPOS","generate","startDate","excludeDate","startDayOfWeek","maximumCount","viewDate","oldTimezone","newTimezone","MAXOCCURRENCE","cacheDate","calendarUtil","getCalendarUtil","data","modifiedDate","Date","getTime","tempExcludeDate","split","tz","content","parsedDate","getDateFromRecurrenceDateString","convert","push","setHours","recExceptionCount","tempViewDate","setDate","maxOccurrence","setFirstDayOfWeek","DAYINDEX","parseInt","end","dailyType","weeklyType","monthlyType","yearlyType","recDateString","substr","excludeDateHandler","date","zeroIndex","indexOf","getDateCount","Math","floor","endDate","expectedCount","state","expectedDays","compareDates","validateRules","getDay","getHours","weekState","wkstIndex","weekCollection","wkst","dayIndex","startDateDiff","weekstartDate","weekendDate","compareTempDate","insertDataCollection","getStartDateForWeek","ruleType","validateMonthlyRuleType","monthlyDayTypeProcessforMonthFreq","monthlyDayTypeProcess","monthlyDateTypeProcessforMonthFreq","monthlyDateTypeProcess","typeValue","checkYearlyType","processWeekNo","processYearDay","stDate","getYearLastDate","startDay","firstWeekSpan","weekNos","weekNo","maxDate","minDate","insertDateCollection","insertDatasIntoExistingCollection","dateCollection","yearDay","getLeapYearDaysCount","isLeapYear","getYearDaysCount","initializeRecRuleVariables","ruleData","monthCollection","mainDate","monthInit","setMonth","currentMonthDate","getMonthStartDate","isSameYear","checkMonth","processDateCollectionForByMonthDay","beginDate","setNextValidDate","setValidDate","setFullYear","isLastMonth","getMonthDaysCount","recRuleVariables","isByMonth","validateProperDate","monthData","addYears","getMonthCollection","dates","isHavingNumber","map","item","HASNUMBER","test","j","expectedDaysArray","match","SPLITNUMBERANDSTRING","position","isSameMonth","isNaN","filterDateCollectionByIndex","insertDateCollectionBasedonBySetPos","dayCycleData","processWeekDays","initialDate","datas","week","row","insertDateCollectionBasedonIndex","processDateCollectionforByDayWithInteger","compareMonth","newstr","getDayString","currentDate","i","getRecurrenceCollection","recurrenceCollectionObject","expectedDaysArrays","arrPosition","getDateCollectionforBySetPosNull","recurrenceCollections","dayData","chDate","weekCount","year","firstDayOfWeek","firstOfMonth","lastOfMonth","numberOfDaysInMonth","firstWeekDay","used","ceil","sort","weekIndex","validRules","replace","REMOVENUMBERINSTRING","checkDayIndex","sortedExpectedDays","element","expectedDaysNumberSplit","expectedDaysArr","rules","rulesList","splitData","temp","Number","splice","dayCycle","startIndex","checkDate","expectedDate","slice","shift","checkYear","expectedyearDay","getYearDay","startDateCollection","diff","rotate","days","expectedMonth","getExpectedDays","SU","MO","TU","WE","TH","FR","SA","getRecurrenceStringFromDate","getUTCFullYear","roundDateValues","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","join"],"sources":["D:/xampp/htdocs/biolabs/biolabs/node_modules/@syncfusion/ej2-schedule/src/recurrence-editor/date-generator.js"],"sourcesContent":["/* eslint-disable max-len */\nimport { isNullOrUndefined, getDefaultDateObject, getValue, cldrData } from '@syncfusion/ej2-base';\nimport { MS_PER_DAY, addDays, resetTime, capitalizeFirstWord } from '../schedule/base/util';\nimport { Islamic, Gregorian } from '../common/calendar-util';\nimport { Timezone } from '../schedule/timezone/timezone';\n/**\n * Date Generator from Recurrence Rule\n */\n/**\n * Generate Summary from Recurrence Rule\n *\n * @param {string} rule Accepts the Recurrence rule\n * @param {L10n} localeObject Accepts the locale object\n * @param {string} locale Accepts the locale name\n * @param {CalendarType} calendarType Accepts the calendar type\n * @returns {string} Returns the summary string from given recurrence rule\n */\nexport function generateSummary(rule, localeObject, locale, calendarType) {\n    if (calendarType === void 0) { calendarType = 'Gregorian'; }\n    var ruleObject = extractObjectFromRule(rule);\n    var summary = localeObject.getConstant(EVERY) + ' ';\n    var cldrObj;\n    var cldrObj1;\n    var calendarMode = calendarType.toLowerCase();\n    if (locale === 'en' || locale === 'en-US') {\n        var nameSpace1 = 'months.stand-alone.abbreviated';\n        var nameSpace = 'days.stand-alone.abbreviated';\n        cldrObj1 = (getValue(nameSpace1, getDefaultDateObject(calendarMode)));\n        cldrObj = (getValue(nameSpace, getDefaultDateObject(calendarMode)));\n    }\n    else {\n        var nameSpace1 = 'main.' + locale + '.dates.calendars.' + calendarMode + '.months.stand-alone.abbreviated';\n        var nameSpace = 'main.' + locale + '.dates.calendars.' + calendarMode + '.days.stand-alone.abbreviated';\n        cldrObj1 =\n            (getValue(nameSpace1, cldrData));\n        cldrObj =\n            (getValue(nameSpace, cldrData));\n    }\n    if (ruleObject.interval > 1) {\n        summary += ruleObject.interval + ' ';\n    }\n    switch (ruleObject.freq) {\n        case 'DAILY':\n            summary += localeObject.getConstant(DAYS);\n            break;\n        case 'WEEKLY':\n            summary += localeObject.getConstant(WEEKS) + ' ' + localeObject.getConstant(ON) + ' ';\n            ruleObject.day.forEach(function (day, index) {\n                summary += capitalizeFirstWord(getValue(DAYINDEXOBJECT[\"\" + day], cldrObj), 'single');\n                summary += (((ruleObject.day.length - 1) === index) ? '' : ', ');\n            });\n            break;\n        case 'MONTHLY':\n            summary += localeObject.getConstant(MONTHS) + ' ' + localeObject.getConstant(ON) + ' ';\n            summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n            break;\n        case 'YEARLY':\n            summary += localeObject.getConstant(YEARS) + ' ' + localeObject.getConstant(ON) + ' ';\n            summary += capitalizeFirstWord(getValue((ruleObject.month[0]).toString(), cldrObj1), 'single') + ' ';\n            summary += getMonthSummary(ruleObject, cldrObj, localeObject);\n            break;\n    }\n    if (ruleObject.count) {\n        summary += ', ' + (ruleObject.count) + ' ' + localeObject.getConstant(TIMES);\n    }\n    else if (ruleObject.until) {\n        var tempDate = ruleObject.until;\n        summary += ', ' + localeObject.getConstant(UNTIL)\n            + ' ' + tempDate.getDate()\n            + ' ' + capitalizeFirstWord(getValue((tempDate.getMonth() + 1).toString(), cldrObj1), 'single')\n            + ' ' + tempDate.getFullYear();\n    }\n    return summary;\n}\n/**\n * Generates Month summary\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {string[]} cldrObj Accepts the collections of month name from calendar\n * @param {L10n} localeObj Accepts the locale object\n * @returns {string} Returns the month summary string from given recurrence rule object\n * @private\n */\nfunction getMonthSummary(ruleObject, cldrObj, localeObj) {\n    var summary = '';\n    if (ruleObject.monthDay.length) {\n        summary += ruleObject.monthDay[0];\n    }\n    else if (ruleObject.day) {\n        var pos = ruleObject.setPosition - 1;\n        summary += localeObj.getConstant(WEEKPOS[pos > -1 ? pos : (WEEKPOS.length - 1)])\n            + ' ' + capitalizeFirstWord(getValue(DAYINDEXOBJECT[ruleObject.day[0]], cldrObj), 'single');\n    }\n    return summary;\n}\n/**\n * Generates the date collections from the given recurrence rule\n *\n * @param {Date} startDate Accepts the rule start date\n * @param {string} rule Accepts the recurrence rule\n * @param {string} excludeDate Accepts the exception dates in string format\n * @param {number} startDayOfWeek Accepts the start day index of week\n * @param {number} maximumCount Accepts the maximum number count to generate date collections\n * @param {Date} viewDate Accepts the current date instead of start date\n * @param {CalendarType} calendarMode Accepts the calendar type\n * @param {string} oldTimezone Accepts the timezone name\n * @param {string} newTimezone Accepts the timezone name\n * @returns {number[]} Returns the collection of dates\n */\nexport function generate(startDate, rule, excludeDate, startDayOfWeek, maximumCount, viewDate, calendarMode, oldTimezone, newTimezone) {\n    if (maximumCount === void 0) { maximumCount = MAXOCCURRENCE; }\n    if (viewDate === void 0) { viewDate = null; }\n    if (calendarMode === void 0) { calendarMode = 'Gregorian'; }\n    if (oldTimezone === void 0) { oldTimezone = null; }\n    if (newTimezone === void 0) { newTimezone = null; }\n    var ruleObject = extractObjectFromRule(rule);\n    var cacheDate;\n    calendarUtil = getCalendarUtil(calendarMode);\n    var data = [];\n    var modifiedDate = new Date(startDate.getTime());\n    tempExcludeDate = [];\n    var tempDate = isNullOrUndefined(excludeDate) ? [] : excludeDate.split(',');\n    var tz = new Timezone();\n    tempDate.forEach(function (content) {\n        var parsedDate = getDateFromRecurrenceDateString(content);\n        if (oldTimezone && newTimezone) {\n            parsedDate = tz.convert(new Date(parsedDate.getTime()), oldTimezone, newTimezone);\n        }\n        tempExcludeDate.push(new Date(parsedDate.getTime()).setHours(0, 0, 0, 0));\n    });\n    ruleObject.recExceptionCount = !isNullOrUndefined(ruleObject.count) ? tempExcludeDate.length : 0;\n    if (viewDate && viewDate > startDate && !ruleObject.count) {\n        tempViewDate = new Date(new Date(viewDate.getTime()).setHours(0, 0, 0));\n    }\n    else {\n        tempViewDate = null;\n    }\n    if (!ruleObject.until && tempViewDate) {\n        cacheDate = new Date(tempViewDate.getTime());\n        cacheDate.setDate(tempViewDate.getDate() + maximumCount * (ruleObject.interval));\n        ruleObject.until = cacheDate;\n    }\n    if (ruleObject.until && startDate > ruleObject.until) {\n        return data;\n    }\n    maxOccurrence = maximumCount;\n    setFirstDayOfWeek(DAYINDEX[parseInt(startDayOfWeek.toString(), 10)]);\n    if (ruleObject.until) {\n        var end = resetTime(ruleObject.until);\n        ruleObject.until = new Date(end.getFullYear(), end.getMonth(), end.getDate(), 23, 59, 59);\n    }\n    switch (ruleObject.freq) {\n        case 'DAILY':\n            dailyType(modifiedDate, ruleObject.until, data, ruleObject);\n            break;\n        case 'WEEKLY':\n            weeklyType(modifiedDate, ruleObject.until, data, ruleObject);\n            break;\n        case 'MONTHLY':\n            monthlyType(modifiedDate, ruleObject.until, data, ruleObject);\n            break;\n        case 'YEARLY':\n            yearlyType(modifiedDate, ruleObject.until, data, ruleObject);\n    }\n    return data;\n}\n/**\n * Generate date object from given date string\n *\n * @param {string} recDateString Accepts the exception date as string\n * @returns {Date} Returns the date from exception date string\n */\nexport function getDateFromRecurrenceDateString(recDateString) {\n    return new Date(recDateString.substr(0, 4) +\n        '-' + recDateString.substr(4, 2) +\n        '-' + recDateString.substr(6, 5) +\n        ':' + recDateString.substr(11, 2) +\n        ':' + recDateString.substr(13));\n}\n/**\n * Internal method to handle exclude date\n *\n * @param {number[]} data Accepts the exception date collections\n * @param {number} date Accepts the new exclude date\n * @returns {void}\n * @private\n */\nfunction excludeDateHandler(data, date) {\n    var zeroIndex = new Date(date).setHours(0, 0, 0, 0);\n    if (tempExcludeDate.indexOf(zeroIndex) === -1 && (!tempViewDate || zeroIndex >= tempViewDate.getTime())) {\n        data.push(date);\n    }\n}\n/**\n * Internal method for get date count\n *\n * @param {Date} startDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} Returns the number of date count\n * @private\n */\nfunction getDateCount(startDate, ruleObject) {\n    var count = maxOccurrence;\n    if (ruleObject.count) {\n        count = ruleObject.count;\n    }\n    else if (ruleObject.until) {\n        if (ruleObject.freq === 'DAILY' || ruleObject.freq === 'WEEKLY') {\n            count = Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1;\n        }\n        else if (ruleObject.freq === 'MONTHLY' || ruleObject.freq === 'YEARLY') {\n            count = Math.floor(((ruleObject.until.getMonth() + 12 * ruleObject.until.getFullYear()) -\n                (startDate.getMonth() + 12 * startDate.getFullYear())) / ruleObject.interval) +\n                (ruleObject.day.length > 1 ? (Math.floor((ruleObject.until.getTime() - startDate.getTime()) / MS_PER_DAY) + 1) : 1);\n            if (ruleObject.freq === 'YEARLY') {\n                count = ruleObject.month.length > 1 ? (count * ruleObject.month.length) : count;\n            }\n        }\n    }\n    return count;\n}\n/**\n *  Internal method for daily type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction dailyType(startDate, endDate, data, ruleObject) {\n    var tempDate = new Date(startDate.getTime());\n    var interval = ruleObject.interval;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var state;\n    var expectedDays = ruleObject.day;\n    while (compareDates(tempDate, endDate)) {\n        state = true;\n        state = validateRules(tempDate, ruleObject);\n        if (state && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1 || expectedDays.length === 0)) {\n            excludeDateHandler(data, tempDate.getTime());\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                break;\n            }\n        }\n        tempDate.setDate(tempDate.getDate() + interval);\n        if (tempDate.getHours() !== startDate.getHours()) {\n            tempDate.setHours(startDate.getHours());\n        }\n    }\n}\n/**\n * Internal method for weekly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction weeklyType(startDate, endDate, data, ruleObject) {\n    var tempDate = new Date(startDate.getTime());\n    if (!ruleObject.day.length) {\n        ruleObject.day.push(DAYINDEX[startDate.getDay()]);\n    }\n    var interval = ruleObject.interval;\n    var expectedDays = ruleObject.day;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var weekState = true;\n    var wkstIndex;\n    var weekCollection = [];\n    if (expectedDays.length > 1) {\n        if (isNullOrUndefined(ruleObject.wkst) || ruleObject.wkst === '') {\n            ruleObject.wkst = dayIndex[0];\n        }\n        wkstIndex = DAYINDEX.indexOf(ruleObject.wkst);\n        while (compareDates(tempDate, endDate)) {\n            var startDateDiff = DAYINDEX.indexOf(DAYINDEX[tempDate.getDay()]) - wkstIndex;\n            startDateDiff = startDateDiff === -1 ? 6 : startDateDiff;\n            var weekstartDate = addDays(tempDate, -startDateDiff);\n            var weekendDate = addDays(weekstartDate, 6);\n            var compareTempDate = new Date(tempDate.getTime());\n            weekendDate = resetTime(weekendDate);\n            compareTempDate = resetTime(compareTempDate);\n            while (weekendDate >= compareTempDate) {\n                if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                    weekCollection.push([tempDate.getTime()]);\n                }\n                if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                    break;\n                }\n                tempDate.setDate(tempDate.getDate() + 1);\n                if (tempDate.getHours() !== startDate.getHours()) {\n                    tempDate.setHours(startDate.getHours());\n                }\n                compareTempDate = new Date(tempDate.getTime());\n                compareTempDate = resetTime(compareTempDate);\n            }\n            tempDate.setDate(tempDate.getDate() - 1);\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                break;\n            }\n            tempDate.setDate((tempDate.getDate()) + 1 + ((interval - 1) * 7));\n            insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n            weekCollection = [];\n        }\n    }\n    else {\n        tempDate = getStartDateForWeek(startDate, ruleObject.day);\n        while (compareDates(tempDate, endDate)) {\n            weekState = validateRules(tempDate, ruleObject);\n            if (weekState && (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1)) {\n                excludeDateHandler(data, tempDate.getTime());\n            }\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                break;\n            }\n            tempDate.setDate(tempDate.getDate() + (interval * 7));\n        }\n        insertDataCollection(weekCollection, weekState, startDate, endDate, data, ruleObject);\n        weekCollection = [];\n    }\n}\n/**\n *  Internal method for monthly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyType(startDate, endDate, data, ruleObject) {\n    // Set monthday value if BYDAY, BYMONTH and Month day property is not set based on start date\n    if (!ruleObject.month.length && !ruleObject.day.length && !ruleObject.monthDay.length) {\n        ruleObject.monthDay.push(startDate.getDate());\n        if (ruleObject.freq === 'YEARLY') {\n            ruleObject.month.push(startDate.getMonth() + 1);\n        }\n    }\n    else if (ruleObject.month.length > 0 && !ruleObject.day.length && !ruleObject.monthDay.length) {\n        ruleObject.monthDay.push(startDate.getDate());\n    }\n    var ruleType = validateMonthlyRuleType(ruleObject);\n    switch (ruleType) {\n        case 'day':\n            switch (ruleObject.freq) {\n                case 'MONTHLY':\n                    monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n                    break;\n                case 'YEARLY':\n                    monthlyDayTypeProcess(startDate, endDate, data, ruleObject);\n                    break;\n            }\n            break;\n        case 'both':\n        case 'date':\n            switch (ruleObject.freq) {\n                case 'MONTHLY':\n                    monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n                    break;\n                case 'YEARLY':\n                    monthlyDateTypeProcess(startDate, endDate, data, ruleObject);\n                    break;\n            }\n            break;\n    }\n}\n/**\n * Internal method for yearly type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction yearlyType(startDate, endDate, data, ruleObject) {\n    var typeValue = checkYearlyType(ruleObject);\n    switch (typeValue) {\n        case 'MONTH':\n            monthlyType(startDate, endDate, data, ruleObject);\n            break;\n        case 'WEEKNO':\n            processWeekNo(startDate, endDate, data, ruleObject);\n            break;\n        case 'YEARDAY':\n            processYearDay(startDate, endDate, data, ruleObject);\n            break;\n    }\n}\n/**\n * Internal method for process week no\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processWeekNo(startDate, endDate, data, ruleObject) {\n    var stDate = calendarUtil.getYearLastDate(startDate, 0);\n    var tempDate;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var state;\n    var startDay;\n    var firstWeekSpan;\n    var weekNos = ruleObject.weekNo;\n    var weekNo;\n    var maxDate;\n    var minDate;\n    var weekCollection = [];\n    var expectedDays = ruleObject.day;\n    while (compareDates(stDate, endDate)) {\n        startDay = dayIndex.indexOf(DAYINDEX[stDate.getDay()]);\n        firstWeekSpan = (6 - startDay) + 1;\n        for (var index = 0; index < weekNos.length; index++) {\n            weekNo = weekNos[parseInt(index.toString(), 10)];\n            weekNo = (weekNo > 0) ? weekNo : 53 + weekNo + 1;\n            maxDate = (weekNo === 1) ? firstWeekSpan : firstWeekSpan + ((weekNo - 1) * 7);\n            minDate = (weekNo === 1) ? firstWeekSpan - 7 : firstWeekSpan + ((weekNo - 2) * 7);\n            while (minDate < maxDate) {\n                tempDate = new Date(stDate.getTime() + (MS_PER_DAY * minDate));\n                if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                    if (isNullOrUndefined(ruleObject.setPosition)) {\n                        insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n                    }\n                    else {\n                        weekCollection.push([tempDate.getTime()]);\n                    }\n                }\n                minDate++;\n            }\n        }\n        if (!isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(weekCollection, state, startDate, endDate, data, ruleObject);\n        }\n        if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n            return;\n        }\n        stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n        weekCollection = [];\n    }\n}\n/**\n * Internal method for process year day\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processYearDay(startDate, endDate, data, ruleObject) {\n    var stDate = calendarUtil.getYearLastDate(startDate, 0);\n    var tempDate;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var state;\n    var dateCollection = [];\n    var date;\n    var expectedDays = ruleObject.day;\n    while (compareDates(stDate, endDate)) {\n        for (var index = 0; index < ruleObject.yearDay.length; index++) {\n            date = ruleObject.yearDay[parseInt(index.toString(), 10)];\n            tempDate = new Date(stDate.getTime());\n            if ((date === calendarUtil.getLeapYearDaysCount() || date === -calendarUtil.getLeapYearDaysCount()) &&\n                (!calendarUtil.isLeapYear(calendarUtil.getFullYear(tempDate), 1))) {\n                tempDate.setDate(tempDate.getDate() + 1);\n                continue;\n            }\n            tempDate.setDate(tempDate.getDate() + ((date < 0) ?\n                calendarUtil.getYearDaysCount(tempDate, 1) + 1 + date : date));\n            if (expectedDays.length === 0 || expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                if (ruleObject.setPosition == null) {\n                    insertDateCollection(state, startDate, endDate, data, ruleObject, tempDate.getTime());\n                }\n                else {\n                    dateCollection.push([tempDate.getTime()]);\n                }\n            }\n        }\n        if (!isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject);\n        }\n        if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n            return;\n        }\n        stDate = calendarUtil.getYearLastDate(tempDate, ruleObject.interval);\n        dateCollection = [];\n    }\n}\n/**\n * Internal method to check yearly type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {YearRuleType} Returns the Yearly rule type object\n * @private\n */\nfunction checkYearlyType(ruleObject) {\n    if (ruleObject.yearDay.length) {\n        return 'YEARDAY';\n    }\n    else if (ruleObject.weekNo.length) {\n        return 'WEEKNO';\n    }\n    return 'MONTH';\n}\n/**\n * Internal method to initialize recurrence rule variables\n *\n * @param {Date} startDate Accepts the start date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {RuleData} Return the rule data object\n * @private\n */\nfunction initializeRecRuleVariables(startDate, ruleObject) {\n    var ruleData = {\n        monthCollection: [],\n        index: 0,\n        tempDate: new Date(startDate.getTime()),\n        mainDate: new Date(startDate.getTime()),\n        expectedCount: getDateCount(startDate, ruleObject),\n        monthInit: 0,\n        dateCollection: []\n    };\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(ruleData.tempDate, ruleObject.month[0], ruleData.tempDate.getDate());\n    }\n    return ruleData;\n}\n/**\n * Internal method for process monthly date type recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDateTypeProcess(startDate, endDate, data, ruleObject) {\n    if (ruleObject.month.length) {\n        monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n        return;\n    }\n    var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n    var currentMonthDate;\n    ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n    while (compareDates(ruleData.tempDate, endDate)) {\n        currentMonthDate = new Date(ruleData.tempDate.getTime());\n        while (calendarUtil.isSameYear(currentMonthDate, ruleData.tempDate) &&\n            (ruleData.expectedCount && (data.length + ruleObject.recExceptionCount) <= ruleData.expectedCount)) {\n            if (ruleObject.month.length === 0 || (ruleObject.month.length > 0\n                && !calendarUtil.checkMonth(ruleData.tempDate, ruleObject.month))) {\n                processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, false);\n                ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n                ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n            }\n            else {\n                calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n                ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n                break;\n            }\n        }\n        ruleData.tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());\n        insertDataCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n        if (calendarUtil.isLastMonth(ruleData.tempDate)) {\n            calendarUtil.setValidDate(ruleData.tempDate, 1, 1);\n            ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n        }\n        if (ruleData.expectedCount && (data.length + ruleObject.recExceptionCount) >= ruleData.expectedCount) {\n            return;\n        }\n        ruleData.tempDate.setFullYear(ruleData.tempDate.getFullYear() + ruleObject.interval - 1);\n        ruleData.tempDate = getStartDateForWeek(ruleData.tempDate, ruleObject.day);\n        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n        ruleData.dateCollection = [];\n    }\n}\n/**\n * Internal method for process monthly date type with month frequency from recurrence rule\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDateTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n    var ruleData = initializeRecRuleVariables(startDate, ruleObject);\n    ruleData.tempDate = ruleData.mainDate = calendarUtil.getMonthStartDate(ruleData.tempDate);\n    if (((ruleObject.freq === 'MONTHLY' && ruleObject.interval === 12) || (ruleObject.freq === 'YEARLY')) &&\n        calendarUtil.getMonthDaysCount(startDate) < ruleObject.monthDay[0]) {\n        return;\n    }\n    while (compareDates(ruleData.tempDate, endDate)) {\n        ruleData.beginDate = new Date(ruleData.tempDate.getTime());\n        processDateCollectionForByMonthDay(ruleObject, ruleData, endDate, true, startDate, data);\n        if (!isNullOrUndefined(ruleObject.setPosition)) {\n            insertDatasIntoExistingCollection(ruleData.dateCollection, ruleData.state, startDate, endDate, data, ruleObject);\n        }\n        if (ruleData.expectedCount && (data.length + ruleObject.recExceptionCount) >= ruleData.expectedCount) {\n            return;\n        }\n        ruleData.monthInit = setNextValidDate(ruleData.tempDate, ruleObject, ruleData.monthInit, ruleData.beginDate);\n        ruleData.dateCollection = [];\n    }\n}\n/**\n * To process date collection for Monthly & Yearly based on BYMONTH Day property\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {RuleData} recRuleVariables Accepts the rule data\n * @param {Date} endDate Accepts the end date\n * @param {boolean} isByMonth Accepts the boolean to validate either month or not\n * @param {Date} startDate Accepts the start date\n * @param {number[]} data Accepts the collection of dates\n * @returns {void}\n * @private\n */\nfunction processDateCollectionForByMonthDay(ruleObject, recRuleVariables, endDate, isByMonth, startDate, data) {\n    for (var index = 0; index < ruleObject.monthDay.length; index++) {\n        recRuleVariables.date = ruleObject.monthDay[parseInt(index.toString(), 10)];\n        recRuleVariables.tempDate = calendarUtil.getMonthStartDate(recRuleVariables.tempDate);\n        var maxDate = calendarUtil.getMonthDaysCount(recRuleVariables.tempDate);\n        recRuleVariables.date = recRuleVariables.date > 0 ? recRuleVariables.date : (maxDate + recRuleVariables.date + 1);\n        if (validateProperDate(recRuleVariables.tempDate, recRuleVariables.date, recRuleVariables.mainDate)\n            && (recRuleVariables.date > 0)) {\n            calendarUtil.setDate(recRuleVariables.tempDate, recRuleVariables.date);\n            if (endDate && recRuleVariables.tempDate > endDate) {\n                return;\n            }\n            if (ruleObject.day.length === 0 || ruleObject.day.indexOf(DAYINDEX[recRuleVariables.tempDate.getDay()]) > -1) {\n                if (isByMonth && isNullOrUndefined(ruleObject.setPosition) && (recRuleVariables.expectedCount\n                    && (data.length + ruleObject.recExceptionCount) < recRuleVariables.expectedCount)) {\n                    insertDateCollection(recRuleVariables.state, startDate, endDate, data, ruleObject, recRuleVariables.tempDate.getTime());\n                }\n                else {\n                    recRuleVariables.dateCollection.push([recRuleVariables.tempDate.getTime()]);\n                }\n            }\n        }\n    }\n}\n/**\n * Internal method to set next valid date\n *\n * @param {Date} tempDate Accepts the date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} monthInit Accepts the initial month\n * @param {Date} beginDate Accepts the initial date\n * @param {number} interval Accepts the interval duration\n * @returns {number} Returnx the next valid date\n * @private\n */\nfunction setNextValidDate(tempDate, ruleObject, monthInit, beginDate, interval) {\n    if (beginDate === void 0) { beginDate = null; }\n    var monthData = beginDate ? beginDate.getMonth() : 0;\n    var startDate = calendarUtil.getMonthStartDate(tempDate);\n    interval = isNullOrUndefined(interval) ? ruleObject.interval : interval;\n    tempDate.setFullYear(startDate.getFullYear());\n    tempDate.setMonth(startDate.getMonth());\n    tempDate.setDate(startDate.getDate());\n    if (ruleObject.month.length) {\n        monthInit++;\n        monthInit = monthInit % ruleObject.month.length;\n        calendarUtil.setMonth(tempDate, ruleObject.month[parseInt(monthInit.toString(), 10)], 1);\n        if (monthInit === 0) {\n            calendarUtil.addYears(tempDate, interval, ruleObject.month[0]);\n        }\n    }\n    else {\n        if (beginDate && (beginDate.getFullYear() < tempDate.getFullYear())) {\n            monthData = tempDate.getMonth() - 1;\n        }\n        calendarUtil.setValidDate(tempDate, interval, 1, monthData, beginDate);\n    }\n    return monthInit;\n}\n/**\n * To get month collection when BYDAY property having more than one value in list.\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction getMonthCollection(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var tempDate = new Date(startDate.getTime());\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    var monthCollection = [];\n    var dateCollection = [];\n    var dates = [];\n    var index;\n    var state;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var monthInit = 0;\n    var beginDate;\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate)\n        && (expectedCount && (data.length + ruleObject.recExceptionCount) < expectedCount)) {\n        var currentMonthDate = new Date(tempDate.getTime());\n        var isHavingNumber = expectedDays.map(function (item) { return HASNUMBER.test(item); });\n        if (isHavingNumber.indexOf(true) > -1) {\n            for (var j = 0; j <= expectedDays.length - 1; j++) {\n                var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);\n                var position = parseInt(expectedDaysArray[0], 10);\n                tempDate = new Date(tempDate.getTime());\n                tempDate = calendarUtil.getMonthStartDate(tempDate);\n                tempDate = getStartDateForWeek(tempDate, expectedDays);\n                currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n                while (calendarUtil.isSameYear(currentMonthDate, tempDate) && calendarUtil.isSameMonth(currentMonthDate, tempDate)) {\n                    if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentMonthDate.getDay()]) {\n                        monthCollection.push([currentMonthDate.getTime()]);\n                    }\n                    currentMonthDate.setDate(currentMonthDate.getDate() + (1));\n                }\n                currentMonthDate.setDate(currentMonthDate.getDate() - (1));\n                if (expectedDaysArray[0].indexOf('-') > -1) {\n                    index = monthCollection.length - (-1 * position);\n                }\n                else {\n                    index = position - 1;\n                }\n                index = isNaN(index) ? 0 : index;\n                if (monthCollection.length > 0) {\n                    if (isNullOrUndefined(ruleObject.setPosition)) {\n                        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n                    }\n                    else {\n                        dateCollection = [(filterDateCollectionByIndex(monthCollection, index, dates))];\n                    }\n                }\n                if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                    return;\n                }\n                monthCollection = [];\n            }\n            if (!isNullOrUndefined(ruleObject.setPosition)) {\n                insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n                dates = [];\n            }\n            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n            monthCollection = [];\n        }\n        else {\n            var weekCollection = [];\n            var dayCycleData = processWeekDays(expectedDays);\n            currentMonthDate.setFullYear(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate());\n            var initialDate = new Date(tempDate.getTime());\n            beginDate = new Date(tempDate.getTime());\n            while (calendarUtil.isSameMonth(initialDate, tempDate)) {\n                weekCollection.push(tempDate.getTime());\n                if (expectedDays.indexOf(DAYINDEX[tempDate.getDay()]) > -1) {\n                    monthCollection.push(weekCollection);\n                    weekCollection = [];\n                }\n                tempDate.setDate(tempDate.getDate()\n                    + dayCycleData[DAYINDEX[tempDate.getDay()]]);\n            }\n            index = ((ruleObject.setPosition < 1) ? (monthCollection.length + ruleObject.setPosition) : ruleObject.setPosition - 1);\n            if (isNullOrUndefined(ruleObject.setPosition)) {\n                index = 0;\n                var datas = [];\n                for (var week = 0; week < monthCollection.length; week++) {\n                    for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {\n                        datas.push(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]);\n                    }\n                }\n                monthCollection = [datas];\n            }\n            if (monthCollection.length > 0) {\n                insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n            }\n            if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                return;\n            }\n            monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n            monthCollection = [];\n        }\n    }\n}\n/**\n * To process monday day type for FREQ=MONTHLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    // When BYDAY property having more than 1 value.\n    if (expectedDays.length > 1) {\n        getMonthCollection(startDate, endDate, data, ruleObject);\n        return;\n    }\n    var tempDate = new Date(startDate.getTime());\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var monthCollection = [];\n    var beginDate;\n    var monthInit = 0;\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate) && (expectedCount && (data.length + ruleObject.recExceptionCount) < expectedCount)) {\n        beginDate = new Date(tempDate.getTime());\n        var currentMonthDate = new Date(tempDate.getTime());\n        while (calendarUtil.isSameMonth(tempDate, currentMonthDate)) {\n            monthCollection.push([currentMonthDate.getTime()]);\n            currentMonthDate.setDate(currentMonthDate.getDate() + (7));\n        }\n        // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n        insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n        monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate);\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        monthCollection = [];\n    }\n}\n/**\n * To process monday day type for FREQ=YEARLY\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction monthlyDayTypeProcess(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var isHavingNumber = expectedDays.map(function (item) { return HASNUMBER.test(item); });\n    // If BYDAY property having more than 1 value in list\n    if (expectedDays.length > 1 && isHavingNumber.indexOf(true) > -1) {\n        processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject);\n        return;\n    }\n    else if (ruleObject.month.length && expectedDays.length === 1 && isHavingNumber.indexOf(true) > -1) {\n        monthlyDayTypeProcessforMonthFreq(startDate, endDate, data, ruleObject);\n        return;\n    }\n    var tempDate = new Date(startDate.getTime());\n    var currentMonthDate;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var interval = ruleObject.interval;\n    var monthCollection = [];\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n    }\n    // Set the date as start date of the yeear if yearly freq having ByDay property alone\n    if (isNullOrUndefined(ruleObject.setPosition) && ruleObject.month.length === 0 && ruleObject.weekNo.length === 0) {\n        tempDate.setFullYear(startDate.getFullYear(), 0, 1);\n    }\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate)) {\n        currentMonthDate = new Date(tempDate.getTime());\n        while (calendarUtil.isSameYear(currentMonthDate, tempDate) &&\n            (expectedCount && (data.length + ruleObject.recExceptionCount) <= expectedCount)) {\n            currentMonthDate = new Date(tempDate.getTime());\n            while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n                if (ruleObject.month.length === 0 || (ruleObject.month.length > 0\n                    && !calendarUtil.checkMonth(tempDate, ruleObject.month))) {\n                    if (expectedDays.length > 1) {\n                        if (calendarUtil.compareMonth(currentMonthDate, tempDate)) {\n                            calendarUtil.setValidDate(tempDate, 1, 1);\n                            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                            break;\n                        }\n                        if (expectedDays.indexOf(DAYINDEX[currentMonthDate.getDay()]) > -1) {\n                            monthCollection.push([currentMonthDate.getTime()]);\n                        }\n                        currentMonthDate.setDate(currentMonthDate.getDate() + (1));\n                    }\n                    else {\n                        // If BYDAY property having 1 value in list\n                        if (currentMonthDate.getFullYear() > tempDate.getFullYear()) {\n                            calendarUtil.setValidDate(tempDate, 1, 1);\n                            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                            break;\n                        }\n                        var newstr = getDayString(expectedDays[0]);\n                        if (DAYINDEX[currentMonthDate.getDay()] === newstr\n                            && new Date(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), 0)\n                                > new Date(startDate.getFullYear())) {\n                            monthCollection.push([currentMonthDate.getTime()]);\n                        }\n                        currentMonthDate.setDate(currentMonthDate.getDate() + (7));\n                    }\n                }\n                else {\n                    calendarUtil.setValidDate(tempDate, 1, 1);\n                    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                    break;\n                }\n            }\n        }\n        tempDate.setFullYear(currentMonthDate.getFullYear(), currentMonthDate.getMonth(), currentMonthDate.getDate());\n        // To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n        insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject);\n        if (calendarUtil.isLastMonth(tempDate)) {\n            calendarUtil.setValidDate(tempDate, 1, 1);\n            tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        }\n        tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n        if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n            return;\n        }\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        monthCollection = [];\n    }\n}\n/**\n * To process the recurrence rule when BYDAY property having values with integer\n *\n * @param {Date} startDate Accepts the strat date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of dates\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction processDateCollectionforByDayWithInteger(startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var tempDate = new Date(startDate.getTime());\n    var interval = ruleObject.interval;\n    var monthCollection = [];\n    var dateCollection = [];\n    var index;\n    var state;\n    var monthInit = 0;\n    var currentMonthDate;\n    var currentDate;\n    var beginDate;\n    tempDate = calendarUtil.getMonthStartDate(tempDate);\n    var datas = [];\n    if (ruleObject.month.length) {\n        calendarUtil.setMonth(tempDate, ruleObject.month[0], 1);\n    }\n    tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n    while (compareDates(tempDate, endDate)) {\n        currentMonthDate = new Date(tempDate.getTime());\n        for (var i = 0; i <= ruleObject.month.length; i++) {\n            for (var j = 0; j <= expectedDays.length - 1; j++) {\n                tempDate = calendarUtil.getMonthStartDate(tempDate);\n                tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                monthCollection = [];\n                while (calendarUtil.isSameYear(currentMonthDate, tempDate) &&\n                    (expectedCount && (data.length + ruleObject.recExceptionCount) <= expectedCount)) {\n                    while (calendarUtil.isSameYear(currentMonthDate, tempDate)) {\n                        currentMonthDate = new Date(tempDate.getTime());\n                        if (ruleObject.month.length === 0 ||\n                            (ruleObject.month.length > 0 && ruleObject.month[parseInt(i.toString(), 10)] === calendarUtil.getMonth(currentMonthDate))) {\n                            var expectedDaysArray = expectedDays[parseInt(j.toString(), 10)].match(SPLITNUMBERANDSTRING);\n                            var position = parseInt(expectedDaysArray[0], 10);\n                            currentDate = new Date(tempDate.getTime());\n                            while (calendarUtil.isSameYear(currentDate, tempDate)\n                                && calendarUtil.isSameMonth(currentDate, tempDate)) {\n                                if (expectedDaysArray[expectedDaysArray.length - 1] === DAYINDEX[currentDate.getDay()]) {\n                                    monthCollection.push([currentDate.getTime()]);\n                                }\n                                currentDate.setDate(currentDate.getDate() + (1));\n                            }\n                            currentDate.setDate(currentDate.getDate() - (1));\n                            if (expectedDaysArray[0].indexOf('-') > -1) {\n                                index = monthCollection.length - (-1 * position);\n                            }\n                            else {\n                                index = position - 1;\n                            }\n                            index = isNaN(index) ? 0 : index;\n                        }\n                        monthInit = setNextValidDate(tempDate, ruleObject, monthInit, beginDate, 1);\n                        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n                    }\n                }\n                tempDate = j === 0 && currentDate ? new Date(currentDate.getTime()) : new Date(currentMonthDate.getTime());\n                if (monthCollection.length > 0) {\n                    if (isNullOrUndefined(ruleObject.setPosition)) {\n                        insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n                    }\n                    else {\n                        dateCollection = [(filterDateCollectionByIndex(monthCollection, index, datas))];\n                    }\n                }\n                if (expectedCount && (data.length + ruleObject.recExceptionCount) >= expectedCount) {\n                    return;\n                }\n            }\n        }\n        if (!isNullOrUndefined(ruleObject.setPosition)) {\n            insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n            datas = [];\n        }\n        if (calendarUtil.isLastMonth(tempDate)) {\n            calendarUtil.setValidDate(tempDate, 1, 1);\n            tempDate.setFullYear(tempDate.getFullYear() + interval - 1);\n        }\n        else {\n            tempDate.setFullYear(tempDate.getFullYear() + interval);\n        }\n        tempDate = getStartDateForWeek(tempDate, ruleObject.day);\n        if (ruleObject.month.length) {\n            calendarUtil.setMonth(tempDate, ruleObject.month[0], tempDate.getDate());\n        }\n    }\n}\n/**\n * To get recurrence collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month collection dates\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {RuleData} Returns the rule data object\n * @private\n */\nfunction getRecurrenceCollection(monthCollection, expectedDays) {\n    var index;\n    var recurrenceCollectionObject = { monthCollection: [], index: 0 };\n    if (expectedDays.length === 1) {\n        // To split numeric value from BYDAY property value\n        var expectedDaysArrays = expectedDays[0].match(SPLITNUMBERANDSTRING);\n        var arrPosition = void 0;\n        if (expectedDaysArrays.length > 1) {\n            arrPosition = parseInt(expectedDaysArrays[0], 10);\n            index = ((arrPosition < 1) ? (monthCollection.length + arrPosition) : arrPosition - 1);\n        }\n        else {\n            index = 0;\n            monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n        }\n    }\n    else {\n        index = 0;\n        monthCollection = getDateCollectionforBySetPosNull(monthCollection);\n    }\n    recurrenceCollectionObject.monthCollection = monthCollection;\n    recurrenceCollectionObject.index = index;\n    return recurrenceCollectionObject;\n}\n/**\n * Internal method to process the data collections\n *\n * @param {number[]} dateCollection Accepts the date collections\n * @param {boolean} state Accepts the state\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of numbers\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDataCollection(dateCollection, state, startDate, endDate, data, ruleObject) {\n    var index = ((ruleObject.setPosition < 1) ?\n        (dateCollection.length + ruleObject.setPosition) : ruleObject.setPosition - 1);\n    if (isNullOrUndefined(ruleObject.setPosition)) {\n        index = 0;\n        dateCollection = getDateCollectionforBySetPosNull(dateCollection);\n    }\n    if (dateCollection.length > 0) {\n        insertDatasIntoExistingCollection(dateCollection, state, startDate, endDate, data, ruleObject, index);\n    }\n}\n/**\n * To process month collection if BYSETPOS is null\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @returns {number[]} Returns the month date collections\n * @private\n */\nfunction getDateCollectionforBySetPosNull(monthCollection) {\n    var datas = [];\n    for (var week = 0; week < monthCollection.length; week++) {\n        for (var row = 0; row < monthCollection[parseInt(week.toString(), 10)].length; row++) {\n            datas.push(new Date(monthCollection[parseInt(week.toString(), 10)][parseInt(row.toString(), 10)]).getTime());\n        }\n    }\n    monthCollection = datas.length > 0 ? [datas] : [];\n    return monthCollection;\n}\n/**\n * To filter date collection based on BYDAY Index, then BYSETPOS and to insert datas into existing collection\n *\n * @param {number[]} monthCollection Accepts the month date collections\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the date collections\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDateCollectionBasedonIndex(monthCollection, startDate, endDate, data, ruleObject) {\n    var expectedDays = ruleObject.day;\n    var state;\n    var datas = [];\n    var dateCollection = [];\n    var recurrenceCollections = getRecurrenceCollection(monthCollection, expectedDays);\n    monthCollection = recurrenceCollections.monthCollection;\n    var index = recurrenceCollections.index;\n    if (ruleObject.setPosition != null) {\n        dateCollection = [(filterDateCollectionByIndex(monthCollection, index, datas))];\n        insertDateCollectionBasedonBySetPos(dateCollection, state, startDate, endDate, data, ruleObject);\n    }\n    else {\n        if (monthCollection.length > 0) {\n            insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index);\n        }\n    }\n    datas = [];\n}\n/**\n * To filter date collection when BYDAY property having values with number\n *\n * @param {number[]} monthCollection Accepts the date collections\n * @param {number} index Accepts the index of date collections\n * @param {number[]} datas Accepts the collection of dates\n * @returns {number[]} Returns the collection of dates\n * @private\n */\nfunction filterDateCollectionByIndex(monthCollection, index, datas) {\n    for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {\n        datas.push(monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)]);\n    }\n    return datas;\n}\n/**\n * To insert processed date collection in final array element\n *\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} dayData Accepts the date index\n * @returns {void}\n * @private\n */\nfunction insertDateCollection(state, startDate, endDate, data, ruleObject, dayData) {\n    var expectedCount = getDateCount(startDate, ruleObject);\n    var chDate = new Date(dayData);\n    state = validateRules(chDate, ruleObject);\n    if ((chDate >= startDate) && compareDates(chDate, endDate) && state\n        && expectedCount && (data.length + ruleObject.recExceptionCount) < expectedCount) {\n        excludeDateHandler(data, dayData);\n    }\n}\n/**\n * Return the last week number of given month and year.\n *\n * @param {number} year Accepts the Year in number format\n * @param {number} startDayOfWeek Accepts the start date\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {number} week Accepts the week in number format\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {number} returns week number\n * @private\n */\nfunction weekCount(year, startDayOfWeek, monthCollection, week, ruleObject) {\n    var firstDayOfWeek = startDayOfWeek || 0;\n    var firstOfMonth = new Date(year, ruleObject.month[0] - 1, 1);\n    var lastOfMonth = new Date(year, ruleObject.month[0], 0);\n    var numberOfDaysInMonth = lastOfMonth.getDate();\n    var firstWeekDay = (firstOfMonth.getDay() - firstDayOfWeek + 7) % 7;\n    var used = firstWeekDay + numberOfDaysInMonth;\n    var count = Math.ceil(used / 7) - 1;\n    var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(count.toString(), 10)];\n    var chDate = new Date(dayData);\n    var state = validateRules(chDate, ruleObject);\n    return (state) ? count : count - 1;\n}\n/**\n * To process date collection based on Byset position after process the collection based on BYDAY property value index: EX:BYDAY=1SUm-1SU\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {void}\n * @private\n */\nfunction insertDateCollectionBasedonBySetPos(monthCollection, state, startDate, endDate, data, ruleObject) {\n    if (monthCollection.length > 0) {\n        for (var week = 0; week < monthCollection.length; week++) {\n            monthCollection[parseInt(week.toString(), 10)].sort();\n            var expectedDays = ruleObject.day;\n            var isHavingNumber = expectedDays.map(function (item) { return HASNUMBER.test(item); });\n            var weekIndex = (ruleObject.freq === 'YEARLY' && (ruleObject.validRules.indexOf('BYMONTH') > -1) &&\n                !(isHavingNumber.indexOf(true) > -1)) ?\n                weekCount(new Date(monthCollection[0][0]).getFullYear(), 0, monthCollection, week, ruleObject)\n                : (monthCollection[parseInt(week.toString(), 10)].length + ruleObject.setPosition);\n            var index = ((ruleObject.setPosition < 1) ? weekIndex : ruleObject.setPosition - 1);\n            var dayData = monthCollection[parseInt(week.toString(), 10)][parseInt(index.toString(), 10)];\n            insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n        }\n    }\n}\n/**\n * To insert datas into existing collection which is processed from previous loop.\n *\n * @param {number[]} monthCollection Accepts the collection of dates\n * @param {boolean} state Accepts the state of the recurrence rule\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @param {number[]} data Accepts the collection of date\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @param {number} index Accepts the index value\n * @returns {void}\n * @private\n */\nfunction insertDatasIntoExistingCollection(monthCollection, state, startDate, endDate, data, ruleObject, index) {\n    if (monthCollection.length > 0) {\n        index = !isNullOrUndefined(index) ? index :\n            ((ruleObject.setPosition < 1)\n                ? (monthCollection.length + ruleObject.setPosition) : ruleObject.setPosition - 1);\n        monthCollection[parseInt(index.toString(), 10)].sort();\n        for (var week = 0; week < monthCollection[parseInt(index.toString(), 10)].length; week++) {\n            var dayData = monthCollection[parseInt(index.toString(), 10)][parseInt(week.toString(), 10)];\n            insertDateCollection(state, startDate, endDate, data, ruleObject, dayData);\n        }\n    }\n}\n/**\n * Internal method to compare dates\n *\n * @param {Date} startDate Accepts the start date\n * @param {Date} endDate Accepts the end date\n * @returns {boolean} Returns the result of checking start and end dates\n * @private\n */\nfunction compareDates(startDate, endDate) {\n    return endDate ? (startDate <= endDate) : true;\n}\n/**\n * Internal method to get day string\n *\n * @param {string} expectedDays Accepts the exception date string\n * @returns {string} Returns the valid string\n * @private\n */\nfunction getDayString(expectedDays) {\n    // To get BYDAY value without numeric value\n    var newstr = expectedDays.replace(REMOVENUMBERINSTRING, '');\n    return newstr;\n}\n/**\n * Internal method to check day index\n *\n * @param {number} day Accepts the day index\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {boolean} Returns the index date\n * @private\n */\nfunction checkDayIndex(day, expectedDays) {\n    var sortedExpectedDays = [];\n    expectedDays.forEach(function (element) {\n        var expectedDaysNumberSplit = element.match(SPLITNUMBERANDSTRING);\n        if (expectedDaysNumberSplit.length === 2) {\n            sortedExpectedDays.push(expectedDaysNumberSplit[1]);\n        }\n        else {\n            sortedExpectedDays.push(expectedDaysNumberSplit[0]);\n        }\n    });\n    return (sortedExpectedDays.indexOf(DAYINDEX[parseInt(day.toString(), 10)]) === -1);\n}\n/**\n * Internal method to get start date of week\n *\n * @param {Date} startDate Accepts the start date\n * @param {string[]} expectedDays Accepts the exception dates\n * @returns {Date} Return the week start date\n * @private\n */\nfunction getStartDateForWeek(startDate, expectedDays) {\n    var tempDate = new Date(startDate.getTime());\n    var newstr;\n    if (expectedDays.length > 0) {\n        var expectedDaysArr = [];\n        for (var i = 0; i <= expectedDays.length - 1; i++) {\n            newstr = getDayString(expectedDays[parseInt(i.toString(), 10)]);\n            expectedDaysArr.push(newstr);\n        }\n        if (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1) {\n            do {\n                tempDate.setDate(tempDate.getDate() + 1);\n            } while (expectedDaysArr.indexOf(DAYINDEX[tempDate.getDay()]) === -1);\n        }\n    }\n    return tempDate;\n}\n/**\n * Method to generate recurrence rule object from given rule\n *\n * @param {string} rules Accepts the recurrence rule\n * @returns {RecRule} Returns the recurrence rule object\n */\nexport function extractObjectFromRule(rules) {\n    var ruleObject = {\n        freq: null,\n        interval: 1,\n        count: null,\n        until: null,\n        day: [],\n        wkst: null,\n        month: [],\n        weekNo: [],\n        monthDay: [],\n        yearDay: [],\n        setPosition: null,\n        validRules: []\n    };\n    var rulesList = rules.split(';');\n    var splitData = [];\n    var temp;\n    rulesList.forEach(function (data) {\n        splitData = data.split('=');\n        switch (splitData[0]) {\n            case 'UNTIL':\n                temp = splitData[1];\n                ruleObject.until = getDateFromRecurrenceDateString(temp);\n                break;\n            case 'BYDAY':\n                ruleObject.day = splitData[1].split(',');\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYMONTHDAY':\n                ruleObject.monthDay = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYMONTH':\n                ruleObject.month = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYYEARDAY':\n                ruleObject.yearDay = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'BYWEEKNO':\n                ruleObject.weekNo = splitData[1].split(',').map(Number);\n                ruleObject.validRules.push(splitData[0]);\n                break;\n            case 'INTERVAL':\n                ruleObject.interval = parseInt(splitData[1], 10);\n                break;\n            case 'COUNT':\n                ruleObject.count = parseInt(splitData[1], 10);\n                break;\n            case 'BYSETPOS':\n                ruleObject.setPosition = parseInt(splitData[1], 10) > 4 ? -1 : parseInt(splitData[1], 10);\n                break;\n            case 'FREQ':\n                ruleObject.freq = splitData[1];\n                break;\n            case 'WKST':\n                ruleObject.wkst = splitData[1];\n                break;\n        }\n    });\n    if ((ruleObject.freq === 'MONTHLY') && (ruleObject.monthDay.length === 0)) {\n        var index = ruleObject.validRules.indexOf('BYDAY');\n        ruleObject.validRules.splice(index, 1);\n    }\n    return ruleObject;\n}\n/**\n * Internal method to validate proper date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number} data Accepts the data value\n * @param {Date} startDate Accepts the start date\n * @returns {boolean} Returns the result of date validate\n * @private\n */\nfunction validateProperDate(tempDate, data, startDate) {\n    var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n    return (data <= maxDate) && (tempDate >= startDate);\n}\n/**\n * Internal method to process week days\n *\n * @param {string[]} expectedDays Accepts the expection dates\n * @returns {Object} Returns the weekdays object\n * @private\n */\nfunction processWeekDays(expectedDays) {\n    var dayCycle = {};\n    expectedDays.forEach(function (element, index) {\n        if (index === expectedDays.length - 1) {\n            var startIndex = dayIndex.indexOf(element);\n            var temp = startIndex;\n            while (temp % 7 !== dayIndex.indexOf(expectedDays[0])) {\n                temp++;\n            }\n            dayCycle[\"\" + element] = temp - startIndex;\n        }\n        else {\n            dayCycle[\"\" + element] = dayIndex.indexOf(expectedDays[(index + 1)]) - dayIndex.indexOf(element);\n        }\n    });\n    return dayCycle;\n}\n/**\n * Internal method to check date\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedDate Accepts the exception dates\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction checkDate(tempDate, expectedDate) {\n    var temp = expectedDate.slice(0);\n    var data;\n    var maxDate = calendarUtil.getMonthDaysCount(tempDate);\n    data = temp.shift();\n    while (data) {\n        if (data < 0) {\n            data = data + maxDate + 1;\n        }\n        if (data === tempDate.getDate()) {\n            return false;\n        }\n        data = temp.shift();\n    }\n    return true;\n}\n/**\n * Internal method to check the year value\n *\n * @param {Date} tempDate Accepts the date value\n * @param {number[]} expectedyearDay Accepts the exception dates in year\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction checkYear(tempDate, expectedyearDay) {\n    var temp = expectedyearDay.slice(0);\n    var data;\n    var yearDay = getYearDay(tempDate);\n    data = temp.shift();\n    while (data) {\n        if (data < 0) {\n            data = data + calendarUtil.getYearDaysCount(tempDate, 0) + 1;\n        }\n        if (data === yearDay) {\n            return false;\n        }\n        data = temp.shift();\n    }\n    return true;\n}\n/**\n * Internal method to get the year day\n *\n * @param {Date} currentDate Accepts the date value\n * @returns {number} Returns the boolean value\n * @private\n */\nfunction getYearDay(currentDate) {\n    if (!startDateCollection[calendarUtil.getFullYear(currentDate)]) {\n        startDateCollection[calendarUtil.getFullYear(currentDate)] = calendarUtil.getYearLastDate(currentDate, 0);\n    }\n    var tempDate = startDateCollection[calendarUtil.getFullYear(currentDate)];\n    var diff = currentDate.getTime() - tempDate.getTime();\n    return Math.ceil(diff / MS_PER_DAY);\n}\n/**\n * Internal method to validate monthly rule type\n *\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {MonthlyType} Returns the monthly type object\n * @private\n */\nfunction validateMonthlyRuleType(ruleObject) {\n    if (ruleObject.monthDay.length && !ruleObject.day.length) {\n        return 'date';\n    }\n    else if (!ruleObject.monthDay.length && ruleObject.day.length) {\n        return 'day';\n    }\n    return 'both';\n}\n/**\n * Internal method to re-order the week days based on first day of week\n *\n * @param {string[]} days Accepts the week days value\n * @returns {void}\n * @private\n */\nfunction rotate(days) {\n    var data = days.shift();\n    days.push(data);\n}\n/**\n * Internal method to set first day of week\n *\n * @param {string} day Accepts the first day string\n * @returns {void}\n * @private\n */\nfunction setFirstDayOfWeek(day) {\n    while (dayIndex[0] !== day) {\n        rotate(dayIndex);\n    }\n}\n/**\n * Internal method to validate recurrence rule\n *\n * @param {Date} tempDate Accepts the date value\n * @param {RecRule} ruleObject Accepts the recurrence rule object\n * @returns {boolean} Returns the boolean value\n * @private\n */\nfunction validateRules(tempDate, ruleObject) {\n    var state = true;\n    var expectedDays = ruleObject.day;\n    var expectedMonth = ruleObject.month;\n    var expectedDate = calendarUtil.getExpectedDays(tempDate, ruleObject.monthDay);\n    var expectedyearDay = ruleObject.yearDay;\n    ruleObject.validRules.forEach(function (rule) {\n        switch (rule) {\n            case 'BYDAY':\n                if (checkDayIndex(tempDate.getDay(), expectedDays)) {\n                    state = false;\n                }\n                break;\n            case 'BYMONTH':\n                if (calendarUtil.checkMonth(tempDate, expectedMonth)) {\n                    state = false;\n                }\n                break;\n            case 'BYMONTHDAY':\n                if (checkDate(tempDate, expectedDate)) {\n                    state = false;\n                }\n                break;\n            case 'BYYEARDAY':\n                if (checkYear(tempDate, expectedyearDay)) {\n                    state = false;\n                }\n                break;\n        }\n    });\n    return state;\n}\n/**\n * Internal method to get calendar util\n *\n * @param {CalendarType} calendarMode Accepts the calendar type object\n * @returns {CalendarUtil} Returns the calendar util object\n * @private\n */\nexport function getCalendarUtil(calendarMode) {\n    if (calendarMode === 'Islamic') {\n        return new Islamic();\n    }\n    return new Gregorian();\n}\nvar startDateCollection = {};\nvar tempExcludeDate;\nvar dayIndex = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar maxOccurrence;\nvar tempViewDate;\nvar calendarUtil;\nvar DAYINDEX = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nvar MAXOCCURRENCE = 43;\nvar WEEKPOS = ['first', 'second', 'third', 'fourth', 'last'];\nvar TIMES = 'summaryTimes';\nvar ON = 'summaryOn';\nvar EVERY = 'every';\nvar UNTIL = 'summaryUntil';\nvar DAYS = 'summaryDay';\nvar WEEKS = 'summaryWeek';\nvar MONTHS = 'summaryMonth';\nvar YEARS = 'summaryYear';\nvar DAYINDEXOBJECT = {\n    SU: 'sun',\n    MO: 'mon',\n    TU: 'tue',\n    WE: 'wed',\n    TH: 'thu',\n    FR: 'fri',\n    SA: 'sat'\n};\n// To check string has number\nvar HASNUMBER = /\\d/;\n// To find the numbers in string\nvar REMOVENUMBERINSTRING = /[^A-Z]+/;\n// To split number and string\nvar SPLITNUMBERANDSTRING = /[a-z]+|[^a-z]+/gi;\n/**\n * Method to generate string from date\n *\n * @param {Date} date Accepts the date value\n * @returns {string} Returns the string value\n */\nexport function getRecurrenceStringFromDate(date) {\n    return [date.getUTCFullYear(),\n        roundDateValues(date.getUTCMonth() + 1),\n        roundDateValues(date.getUTCDate()),\n        'T',\n        roundDateValues(date.getUTCHours()),\n        roundDateValues(date.getUTCMinutes()),\n        roundDateValues(date.getUTCSeconds()),\n        'Z'].join('');\n}\n/**\n * Internal method to round the date values\n *\n * @param {string | number} date Accepts the date value in either string or number format\n * @returns {string} Returns the date value in string format\n * @private\n */\nfunction roundDateValues(date) {\n    return ('0' + date).slice(-2);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}